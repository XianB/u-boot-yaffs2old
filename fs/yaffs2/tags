!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_EXTRA_FLAGS	yaffs_packedtags2.c	37;"	d	file:
ATTR_ATIME	devextras.h	238;"	d
ATTR_ATIME_SET	devextras.h	241;"	d
ATTR_ATTR_FLAG	devextras.h	244;"	d
ATTR_CTIME	devextras.h	240;"	d
ATTR_FORCE	devextras.h	243;"	d
ATTR_GID	devextras.h	236;"	d
ATTR_MODE	devextras.h	234;"	d
ATTR_MTIME	devextras.h	239;"	d
ATTR_MTIME_SET	devextras.h	242;"	d
ATTR_SIZE	devextras.h	237;"	d
ATTR_UID	devextras.h	235;"	d
CONFIG_YAFFS_DIRECT	yportenv.h	22;"	d
DT_BLK	devextras.h	215;"	d
DT_CHR	devextras.h	213;"	d
DT_DIR	devextras.h	214;"	d
DT_FIFO	devextras.h	212;"	d
DT_LNK	devextras.h	217;"	d
DT_REG	devextras.h	216;"	d
DT_SOCK	devextras.h	218;"	d
DT_UNKNOWN	devextras.h	211;"	d
DT_WHT	devextras.h	219;"	d
EACCESS	yaffsfs.h	95;"	d
EBADF	yaffsfs.h	91;"	d
EBUSY	yaffsfs.h	79;"	d
EEXIST	yaffsfs.h	119;"	d
EINVAL	yaffsfs.h	87;"	d
EISDIR	yaffsfs.h	127;"	d
ENODEV	yaffsfs.h	83;"	d
ENOENT	yaffsfs.h	103;"	d
ENOMEM	yaffsfs.h	115;"	d
ENOSPC	yaffsfs.h	107;"	d
ENOTDIR	yaffsfs.h	123;"	d
ENOTEMPTY	yaffsfs.h	111;"	d
EXDEV	yaffsfs.h	99;"	d
EXTRA_HEADER_INFO_FLAG	yaffs_packedtags2.c	32;"	d	file:
EXTRA_OBJECT_TYPE_MASK	yaffs_packedtags2.c	41;"	d	file:
EXTRA_OBJECT_TYPE_SHIFT	yaffs_packedtags2.c	40;"	d	file:
EXTRA_SHADOWS_FLAG	yaffs_packedtags2.c	34;"	d	file:
EXTRA_SHRINK_FLAG	yaffs_packedtags2.c	33;"	d	file:
EXTRA_SPARE_FLAGS	yaffs_packedtags2.c	35;"	d	file:
INIT_LIST_HEAD	devextras.h	66;"	d
KERN_DEBUG	devextras.h	258;"	d
LIB	Makefile	/^LIB = $(obj)libyaffs2.a$/;"	m
LIST_HEAD	devextras.h	63;"	d
LIST_HEAD_INIT	devextras.h	61;"	d
MOUNT_POINT	yaffscfg.c	92;"	d	file:
NAME_MAX	yaffsfs.h	35;"	d
NULL	yaffsfs.c	31;"	d	file:
OBJS	Makefile	/^OBJS    := $(addprefix $(obj),$(COBJS-y))$/;"	m
O_APPEND	yaffsfs.h	63;"	d
O_CREAT	yaffsfs.h	51;"	d
O_EXCL	yaffsfs.h	55;"	d
O_RDONLY	yaffsfs.h	39;"	d
O_RDWR	yaffsfs.h	47;"	d
O_TRUNC	yaffsfs.h	59;"	d
O_WRONLY	yaffsfs.h	43;"	d
SEEK_CUR	yaffsfs.h	71;"	d
SEEK_END	yaffsfs.h	75;"	d
SEEK_SET	yaffsfs.h	67;"	d
SRCS	Makefile	/^SRCS    := $(COBJS-y:.o=.c)$/;"	m
SWAPINIT	yaffs_qsort.c	50;"	d	file:
S_IFDIR	yaffsfs.h	142;"	d
S_IFLNK	yaffsfs.h	138;"	d
S_IFMT	yaffsfs.h	134;"	d
S_IFREG	yaffsfs.h	146;"	d
S_IREAD	yaffsfs.h	150;"	d
S_IWRITE	yaffsfs.h	154;"	d
ShiftDiv	yaffs_guts.c	/^static __u32 ShiftDiv(__u32 x)$/;"	f	file:
ShiftsGE	yaffs_guts.c	/^static __u32 ShiftsGE(__u32 x)$/;"	f	file:
StructType	yaffs_guts.h	/^	int StructType;$/;"	m	struct:__anon22
T	yportenv.h	187;"	d
TENDSTR	ydirectenv.h	72;"	d
TENDSTR	yportenv.h	131;"	d
TENDSTR	yportenv.h	85;"	d
TOUT	ydirectenv.h	74;"	d
TOUT	yportenv.h	133;"	d
TOUT	yportenv.h	87;"	d
TSTR	ydirectenv.h	73;"	d
TSTR	yportenv.h	132;"	d
TSTR	yportenv.h	86;"	d
YAFFSFS_MAX_SYMLINK_DEREFERENCES	yaffsfs.c	28;"	d	file:
YAFFSFS_N_HANDLES	yaffscfg.h	28;"	d
YAFFS_ALLOCATION_NLINKS	yaffs_guts.h	59;"	d
YAFFS_ALLOCATION_NOBJECTS	yaffs_guts.h	57;"	d
YAFFS_ALLOCATION_NTNODES	yaffs_guts.h	58;"	d
YAFFS_BLOCK_STATE_ALLOCATING	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_ALLOCATING,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_CHECKPOINT	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_CHECKPOINT,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_COLLECTING	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_COLLECTING,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_DEAD	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_DEAD$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_DIRTY	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_DIRTY,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_EMPTY	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_EMPTY,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_FULL	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_FULL,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_NEEDS_SCANNING	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_NEEDS_SCANNING,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_SCANNING	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_SCANNING,$/;"	e	enum:__anon11
YAFFS_BLOCK_STATE_UNKNOWN	yaffs_guts.h	/^	YAFFS_BLOCK_STATE_UNKNOWN = 0,$/;"	e	enum:__anon11
YAFFS_BYTES_PER_BLOCK	yaffs_guts.h	47;"	d
YAFFS_BYTES_PER_CHUNK	yaffs_guts.h	44;"	d
YAFFS_BYTES_PER_SPARE	yaffs_guts.h	43;"	d
YAFFS_CHECKPOINT_VERSION	yaffs_guts.h	66;"	d
YAFFS_CHUNKS_PER_BLOCK	yaffs_guts.h	46;"	d
YAFFS_CHUNK_SIZE_SHIFT	yaffs_guts.h	45;"	d
YAFFS_ECC_RESULT_FIXED	yaffs_guts.h	/^	YAFFS_ECC_RESULT_FIXED,$/;"	e	enum:__anon7
YAFFS_ECC_RESULT_NO_ERROR	yaffs_guts.h	/^	YAFFS_ECC_RESULT_NO_ERROR,$/;"	e	enum:__anon7
YAFFS_ECC_RESULT_UNFIXED	yaffs_guts.h	/^	YAFFS_ECC_RESULT_UNFIXED$/;"	e	enum:__anon7
YAFFS_ECC_RESULT_UNKNOWN	yaffs_guts.h	/^	YAFFS_ECC_RESULT_UNKNOWN,$/;"	e	enum:__anon7
YAFFS_FAIL	yaffs_guts.h	23;"	d
YAFFS_HIGHEST_SEQUENCE_NUMBER	yaffs_guts.h	109;"	d
YAFFS_LOSTNFOUND_MODE	ydirectenv.h	87;"	d
YAFFS_LOSTNFOUND_MODE	yportenv.h	140;"	d
YAFFS_LOSTNFOUND_MODE	yportenv.h	72;"	d
YAFFS_LOSTNFOUND_NAME	ydirectenv.h	77;"	d
YAFFS_LOSTNFOUND_NAME	yportenv.h	135;"	d
YAFFS_LOSTNFOUND_NAME	yportenv.h	58;"	d
YAFFS_LOSTNFOUND_PREFIX	ydirectenv.h	78;"	d
YAFFS_LOSTNFOUND_PREFIX	yportenv.h	136;"	d
YAFFS_LOSTNFOUND_PREFIX	yportenv.h	59;"	d
YAFFS_LOWEST_SEQUENCE_NUMBER	yaffs_guts.h	108;"	d
YAFFS_MAGIC	yaffs_guts.h	31;"	d
YAFFS_MAX_ALIAS_LENGTH	yaffs_guts.h	70;"	d
YAFFS_MAX_ALIAS_LENGTH	yaffs_guts.h	73;"	d
YAFFS_MAX_CHUNK_ID	yaffs_guts.h	53;"	d
YAFFS_MAX_NAME_LENGTH	yaffs_guts.h	69;"	d
YAFFS_MAX_NAME_LENGTH	yaffs_guts.h	72;"	d
YAFFS_MAX_SHORT_OP_CACHES	yaffs_guts.h	91;"	d
YAFFS_MIN_YAFFS2_CHUNK_SIZE	yaffs_guts.h	50;"	d
YAFFS_MIN_YAFFS2_SPARE_SIZE	yaffs_guts.h	51;"	d
YAFFS_NOBJECT_BUCKETS	yaffs_guts.h	61;"	d
YAFFS_NTNODES_INTERNAL	yaffs_guts.h	37;"	d
YAFFS_NTNODES_LEVEL0	yaffs_guts.h	33;"	d
YAFFS_NUMBER_OF_BLOCK_STATES	yaffs_guts.h	273;"	d
YAFFS_N_TEMP_BUFFERS	yaffs_guts.h	93;"	d
YAFFS_OBJECTID_CHECKPOINT_DATA	yaffs_guts.h	86;"	d
YAFFS_OBJECTID_DELETED	yaffs_guts.h	82;"	d
YAFFS_OBJECTID_LOSTNFOUND	yaffs_guts.h	80;"	d
YAFFS_OBJECTID_ROOT	yaffs_guts.h	79;"	d
YAFFS_OBJECTID_SB_HEADER	yaffs_guts.h	85;"	d
YAFFS_OBJECTID_UNLINKED	yaffs_guts.h	81;"	d
YAFFS_OBJECT_SPACE	yaffs_guts.h	64;"	d
YAFFS_OBJECT_TYPE_DIRECTORY	yaffs_guts.h	/^	YAFFS_OBJECT_TYPE_DIRECTORY,$/;"	e	enum:__anon8
YAFFS_OBJECT_TYPE_FILE	yaffs_guts.h	/^	YAFFS_OBJECT_TYPE_FILE,$/;"	e	enum:__anon8
YAFFS_OBJECT_TYPE_HARDLINK	yaffs_guts.h	/^	YAFFS_OBJECT_TYPE_HARDLINK,$/;"	e	enum:__anon8
YAFFS_OBJECT_TYPE_MAX	yaffs_guts.h	169;"	d
YAFFS_OBJECT_TYPE_SPECIAL	yaffs_guts.h	/^	YAFFS_OBJECT_TYPE_SPECIAL$/;"	e	enum:__anon8
YAFFS_OBJECT_TYPE_SYMLINK	yaffs_guts.h	/^	YAFFS_OBJECT_TYPE_SYMLINK,$/;"	e	enum:__anon8
YAFFS_OBJECT_TYPE_UNKNOWN	yaffs_guts.h	/^	YAFFS_OBJECT_TYPE_UNKNOWN,$/;"	e	enum:__anon8
YAFFS_OK	yaffs_guts.h	22;"	d
YAFFS_PASSIVE_GC_CHUNKS	yaffs_guts.c	46;"	d	file:
YAFFS_ROOT_MODE	ydirectenv.h	86;"	d
YAFFS_ROOT_MODE	yportenv.h	139;"	d
YAFFS_ROOT_MODE	yportenv.h	71;"	d
YAFFS_SEQUENCE_CHECKPOINT_DATA	yaffs_guts.h	87;"	d
YAFFS_SHORT_NAME_LENGTH	yaffs_guts.h	76;"	d
YAFFS_TNODES_INTERNAL_BITS	yaffs_guts.h	38;"	d
YAFFS_TNODES_INTERNAL_MASK	yaffs_guts.h	39;"	d
YAFFS_TNODES_LEVEL0_BITS	yaffs_guts.h	34;"	d
YAFFS_TNODES_LEVEL0_MASK	yaffs_guts.h	35;"	d
YAFFS_TNODES_MAX_LEVEL	yaffs_guts.h	40;"	d
YAFFS_TRACE_ALLOCATE	yportenv.h	161;"	d
YAFFS_TRACE_ALWAYS	yportenv.h	184;"	d
YAFFS_TRACE_BAD_BLOCKS	yportenv.h	163;"	d
YAFFS_TRACE_BUFFERS	yportenv.h	169;"	d
YAFFS_TRACE_BUG	yportenv.h	183;"	d
YAFFS_TRACE_CHECKPOINT	yportenv.h	174;"	d
YAFFS_TRACE_DELETION	yportenv.h	168;"	d
YAFFS_TRACE_ERASE	yportenv.h	164;"	d
YAFFS_TRACE_ERROR	yportenv.h	182;"	d
YAFFS_TRACE_GC	yportenv.h	165;"	d
YAFFS_TRACE_GC_DETAIL	yportenv.h	171;"	d
YAFFS_TRACE_MTD	yportenv.h	173;"	d
YAFFS_TRACE_NANDACCESS	yportenv.h	170;"	d
YAFFS_TRACE_OS	yportenv.h	160;"	d
YAFFS_TRACE_SCAN	yportenv.h	162;"	d
YAFFS_TRACE_SCAN_DEBUG	yportenv.h	172;"	d
YAFFS_TRACE_TRACING	yportenv.h	167;"	d
YAFFS_TRACE_VERIFY	yportenv.h	176;"	d
YAFFS_TRACE_VERIFY_ALL	yportenv.h	179;"	d
YAFFS_TRACE_VERIFY_FULL	yportenv.h	178;"	d
YAFFS_TRACE_VERIFY_NAND	yportenv.h	177;"	d
YAFFS_TRACE_WRITE	yportenv.h	166;"	d
YAFFS_UNUSED_OBJECT_ID	yaffs_guts.h	55;"	d
YAFFS_WR_ATTEMPTS	yaffs_guts.h	99;"	d
YBUG	yportenv.h	190;"	d
YCHAR	ydirectenv.h	41;"	d
YCHAR	yportenv.h	117;"	d
YCHAR	yportenv.h	46;"	d
YFREE	ydirectenv.h	58;"	d
YFREE	yportenv.h	113;"	d
YFREE	yportenv.h	63;"	d
YFREE_ALT	ydirectenv.h	60;"	d
YFREE_ALT	yportenv.h	115;"	d
YFREE_ALT	yportenv.h	65;"	d
YMALLOC	ydirectenv.h	57;"	d
YMALLOC	yportenv.h	112;"	d
YMALLOC	yportenv.h	62;"	d
YMALLOC_ALT	ydirectenv.h	59;"	d
YMALLOC_ALT	yportenv.h	114;"	d
YMALLOC_ALT	yportenv.h	64;"	d
YMALLOC_DMA	ydirectenv.h	62;"	d
YMALLOC_DMA	yportenv.h	66;"	d
YUCHAR	ydirectenv.h	42;"	d
YUCHAR	yportenv.h	118;"	d
YUCHAR	yportenv.h	47;"	d
YYIELD	ydirectenv.h	64;"	d
YYIELD	yportenv.h	69;"	d
Y_CURRENT_TIME	ydirectenv.h	83;"	d
Y_CURRENT_TIME	yportenv.h	75;"	d
Y_CURRENT_TIME	yportenv.h	78;"	d
Y_INLINE	ydirectenv.h	52;"	d
Y_INLINE	ydirectenv.h	54;"	d
Y_INLINE	yportenv.h	126;"	d
Y_INLINE	yportenv.h	56;"	d
Y_TIME_CONVERT	ydirectenv.h	84;"	d
Y_TIME_CONVERT	yportenv.h	76;"	d
Y_TIME_CONVERT	yportenv.h	79;"	d
_Y	ydirectenv.h	43;"	d
_Y	yportenv.h	119;"	d
_Y	yportenv.h	48;"	d
__EXTRAS_H__	devextras.h	24;"	d
__YAFFSCFG_H__	yaffscfg.h	23;"	d
__YAFFSFS_H__	yaffsfs.h	23;"	d
__YAFFSINTERFACE_H__	yaffsinterface.h	17;"	d
__YAFFS_CHECKPTRW_H__	yaffs_checkptrw.h	17;"	d
__YAFFS_ECC_H__	yaffs_ecc.h	27;"	d
__YAFFS_FLASH_H__	yaffs_flashif.h	17;"	d
__YAFFS_GUTS_H__	yaffs_guts.h	17;"	d
__YAFFS_MTDIF2_H__	yaffs_mtdif2.h	17;"	d
__YAFFS_MTDIF_H__	yaffs_mtdif.h	17;"	d
__YAFFS_NANDEMUL2K_H__	yaffs_nandemul2k.h	19;"	d
__YAFFS_NAND_H__	yaffs_nand.h	17;"	d
__YAFFS_PACKEDTAGS1_H__	yaffs_packedtags1.h	19;"	d
__YAFFS_PACKEDTAGS2_H__	yaffs_packedtags2.h	19;"	d
__YAFFS_QSORT_H__	yaffs_qsort.h	18;"	d
__YAFFS_RAMDISK_H__	yaffs_ramdisk.h	21;"	d
__YAFFS_TAGSCOMPAT_H__	yaffs_tagscompat.h	17;"	d
__YAFFS_TAGS_VALIDITY_H__	yaffs_tagsvalidity.h	18;"	d
__YDIRECTENV_H__	ydirectenv.h	21;"	d
__YPORTENV_H__	yportenv.h	18;"	d
__inline__	devextras.h	27;"	d
__list_add	devextras.h	/^static __inline__ void __list_add(struct list_head *new,$/;"	f
__list_del	devextras.h	/^static __inline__ void __list_del(struct list_head *prev,$/;"	f
alias	yaffs_guts.h	/^	YCHAR *alias;$/;"	m	struct:__anon16
alias	yaffs_guts.h	/^	YCHAR alias[YAFFS_MAX_ALIAS_LENGTH + 1];$/;"	m	struct:__anon13
allocatedObjectList	yaffs_guts.h	/^	yaffs_ObjectList *allocatedObjectList;$/;"	m	struct:yaffs_DeviceStruct
allocatedTnodeList	yaffs_guts.h	/^	yaffs_TnodeList *allocatedTnodeList;$/;"	m	struct:yaffs_DeviceStruct
allocationBlock	yaffs_guts.h	/^	int allocationBlock;	\/* Current block being allocated off *\/$/;"	m	struct:__anon23
allocationBlock	yaffs_guts.h	/^	int allocationBlock;	\/* Current block being allocated off *\/$/;"	m	struct:yaffs_DeviceStruct
allocationBlockFinder	yaffs_guts.h	/^	int allocationBlockFinder;	\/* Used to search for next allocation block *\/$/;"	m	struct:yaffs_DeviceStruct
allocationPage	yaffs_guts.h	/^	__u32 allocationPage;$/;"	m	struct:__anon23
allocationPage	yaffs_guts.h	/^	__u32 allocationPage;$/;"	m	struct:yaffs_DeviceStruct
append	yaffsfs.c	/^	__u8  append:1;		\/\/ append only$/;"	m	struct:__anon26	file:
asBytes	yaffs_guts.h	/^	__u8 asBytes[8];$/;"	m	union:__anon6
asTags	yaffs_guts.h	/^	yaffs_Tags asTags;$/;"	m	union:__anon6
block	yaffs_guts.c	/^	int block;$/;"	m	struct:__anon3	file:
blockBad	yaffs_guts.h	/^	unsigned blockBad;$/;"	m	struct:__anon9
blockInfo	yaffs_guts.h	/^	yaffs_BlockInfo *blockInfo;$/;"	m	struct:yaffs_DeviceStruct
blockInfoAlt	yaffs_guts.h	/^	unsigned blockInfoAlt:1;	\/* was allocated using alternative strategy *\/$/;"	m	struct:yaffs_DeviceStruct
blockOffset	yaffs_guts.h	/^	int blockOffset;$/;"	m	struct:yaffs_DeviceStruct
blockState	yaffs_guts.h	/^	unsigned blockState:4;	\/* One of the above block states. NB use unsigned because enum is sometimes an int *\/$/;"	m	struct:__anon12
blockStateName	yaffs_guts.c	/^static const char * blockStateName[] = {$/;"	v	file:
blockStatus	yaffs_guts.h	/^	__u8 blockStatus;$/;"	m	struct:__anon10
blocksInCheckpoint	yaffs_guts.h	/^	int blocksInCheckpoint;$/;"	m	struct:yaffs_DeviceStruct
buffer	yaffs_guts.h	/^	__u8 *buffer;$/;"	m	struct:__anon21
bufferedBlock	yaffs_guts.h	/^	int bufferedBlock;	\/* Which block is buffered here? *\/$/;"	m	struct:yaffs_DeviceStruct
byteCount	yaffs_guts.h	/^	unsigned byteCount:10;$/;"	m	struct:__anon5
byteCount	yaffs_guts.h	/^	unsigned byteCount;	\/* Only valid for data chunks *\/$/;"	m	struct:__anon9
byteCount	yaffs_packedtags1.h	/^	unsigned byteCount:10;$/;"	m	struct:__anon28
byteCount	yaffs_packedtags2.h	/^	unsigned byteCount;$/;"	m	struct:__anon1
cacheHits	yaffs_guts.h	/^	int cacheHits;$/;"	m	struct:yaffs_DeviceStruct
checkMount	yaffscfg.c	/^static void checkMount(void)$/;"	f	file:
checkpointBlockList	yaffs_guts.h	/^	int *checkpointBlockList;$/;"	m	struct:yaffs_DeviceStruct
checkpointBuffer	yaffs_guts.h	/^	__u8 *checkpointBuffer;$/;"	m	struct:yaffs_DeviceStruct
checkpointByteCount	yaffs_guts.h	/^	int checkpointByteCount;$/;"	m	struct:yaffs_DeviceStruct
checkpointByteOffset	yaffs_guts.h	/^	int checkpointByteOffset;$/;"	m	struct:yaffs_DeviceStruct
checkpointCurrentBlock	yaffs_guts.h	/^	int checkpointCurrentBlock;$/;"	m	struct:yaffs_DeviceStruct
checkpointCurrentChunk	yaffs_guts.h	/^	int checkpointCurrentChunk;$/;"	m	struct:yaffs_DeviceStruct
checkpointEndBlock	yaffs_guts.h	/^	int checkpointEndBlock;$/;"	m	struct:__anon22
checkpointMaxBlocks	yaffs_guts.h	/^	int checkpointMaxBlocks;$/;"	m	struct:yaffs_DeviceStruct
checkpointNextBlock	yaffs_guts.h	/^	int checkpointNextBlock;$/;"	m	struct:yaffs_DeviceStruct
checkpointOpenForWrite	yaffs_guts.h	/^	int checkpointOpenForWrite;$/;"	m	struct:yaffs_DeviceStruct
checkpointPageSequence	yaffs_guts.h	/^	int checkpointPageSequence;   \/* running sequence number of checkpoint pages *\/$/;"	m	struct:yaffs_DeviceStruct
checkpointStartBlock	yaffs_guts.h	/^	int checkpointStartBlock;$/;"	m	struct:__anon22
checkpointSum	yaffs_guts.h	/^	__u32 checkpointSum;$/;"	m	struct:yaffs_DeviceStruct
checkpointXor	yaffs_guts.h	/^	__u32 checkpointXor;$/;"	m	struct:yaffs_DeviceStruct
children	yaffs_guts.h	/^	struct list_head children;	\/* list of child links *\/$/;"	m	struct:__anon15	typeref:struct:__anon15::list_head
chunkBitmapStride	yaffs_guts.h	/^	int chunkBitmapStride;	\/* Number of bytes of chunkBits per block.$/;"	m	struct:yaffs_DeviceStruct
chunkBits	yaffs_guts.h	/^	__u8 *chunkBits;	\/* bitmap of chunks in use *\/$/;"	m	struct:yaffs_DeviceStruct
chunkBitsAlt	yaffs_guts.h	/^	unsigned chunkBitsAlt:1;	\/* was allocated using alternative strategy *\/$/;"	m	struct:yaffs_DeviceStruct
chunkDeleted	yaffs_guts.h	/^	unsigned chunkDeleted;	\/* The chunk is marked deleted *\/$/;"	m	struct:__anon9
chunkErrorStrikes	yaffs_guts.h	/^	__u32 chunkErrorStrikes:3; \/* How many times we've had ecc etc failures on this block and tried to reuse it *\/$/;"	m	struct:__anon12
chunkGroupBits	yaffs_guts.h	/^	__u16 chunkGroupBits;	\/* 0 for devices <= 32MB. else log2(nchunks) - 16 *\/$/;"	m	struct:yaffs_DeviceStruct
chunkGroupSize	yaffs_guts.h	/^	__u16 chunkGroupSize;	\/* == 2^^chunkGroupBits *\/$/;"	m	struct:yaffs_DeviceStruct
chunkId	yaffs_guts.h	/^	int chunkId;$/;"	m	struct:__anon20
chunkId	yaffs_guts.h	/^	int chunkId;$/;"	m	struct:__anon4
chunkId	yaffs_guts.h	/^	int chunkId;$/;"	m	struct:yaffs_ObjectStruct
chunkId	yaffs_guts.h	/^	unsigned chunkId:20;$/;"	m	struct:__anon5
chunkId	yaffs_guts.h	/^	unsigned chunkId;	\/* If 0 then this is a header, else a data chunk *\/$/;"	m	struct:__anon9
chunkId	yaffs_packedtags1.h	/^	unsigned chunkId:20;$/;"	m	struct:__anon28
chunkId	yaffs_packedtags2.h	/^	unsigned chunkId;$/;"	m	struct:__anon1
chunkMask	yaffs_guts.h	/^	__u32 chunkMask;$/;"	m	struct:yaffs_DeviceStruct
chunkOffset	yaffs_guts.h	/^	int chunkOffset;$/;"	m	struct:yaffs_DeviceStruct
chunkShift	yaffs_guts.h	/^	__u32 chunkShift;$/;"	m	struct:yaffs_DeviceStruct
chunkUsed	yaffs_guts.h	/^	unsigned chunkUsed;	\/*  Status of the chunk: used or unused *\/$/;"	m	struct:__anon9
cmd_yaffs_ls	yaffscfg.c	/^void cmd_yaffs_ls(const char *mountpt, int longlist)$/;"	f
cmd_yaffs_mkdir	yaffscfg.c	/^void cmd_yaffs_mkdir(const char *dir)$/;"	f
cmd_yaffs_mount	yaffscfg.c	/^void cmd_yaffs_mount(char *mp)$/;"	f
cmd_yaffs_mread_file	yaffscfg.c	/^void cmd_yaffs_mread_file(char *fn, char *addr)$/;"	f
cmd_yaffs_mv	yaffscfg.c	/^void cmd_yaffs_mv(const char *oldPath, const char *newPath)$/;"	f
cmd_yaffs_mwrite_file	yaffscfg.c	/^void cmd_yaffs_mwrite_file(char *fn, char *addr, int size)$/;"	f
cmd_yaffs_read_file	yaffscfg.c	/^void cmd_yaffs_read_file(char *fn)$/;"	f
cmd_yaffs_rm	yaffscfg.c	/^void cmd_yaffs_rm(const char *path)$/;"	f
cmd_yaffs_rmdir	yaffscfg.c	/^void cmd_yaffs_rmdir(const char *dir)$/;"	f
cmd_yaffs_umount	yaffscfg.c	/^void cmd_yaffs_umount(char *mp)$/;"	f
cmd_yaffs_write_file	yaffscfg.c	/^void cmd_yaffs_write_file(char *yaffsName,char bval,int sizeOfFile)$/;"	f
colParity	yaffs_ecc.h	/^	unsigned char colParity;$/;"	m	struct:__anon29
column_parity_table	yaffs_ecc.c	/^static const unsigned char column_parity_table[] = {$/;"	v	file:
compile_time_assertion	yportenv.h	94;"	d
count	yaffs_guts.h	/^	int count;$/;"	m	struct:__anon19
crumbMask	yaffs_guts.h	/^	__u32 crumbMask;$/;"	m	struct:yaffs_DeviceStruct
crumbShift	yaffs_guts.h	/^	__u32 crumbShift;$/;"	m	struct:yaffs_DeviceStruct
crumbsPerChunk	yaffs_guts.h	/^	__u32 crumbsPerChunk;$/;"	m	struct:yaffs_DeviceStruct
currentDirtyChecker	yaffs_guts.h	/^	int currentDirtyChecker;	\/* Used to find current dirtiest block *\/$/;"	m	struct:yaffs_DeviceStruct
d_dont_use	yaffsfs.h	/^    unsigned d_dont_use;	\/* debug pointer, not for public consumption *\/$/;"	m	struct:yaffs_dirent
d_ino	yaffsfs.h	/^    long d_ino;                 \/* inode number *\/$/;"	m	struct:yaffs_dirent
d_name	yaffsfs.h	/^    char d_name [NAME_MAX+1];   \/* file name (null-terminated) *\/$/;"	m	struct:yaffs_dirent
d_off	yaffsfs.h	/^    off_t d_off;                \/* offset to this dirent *\/$/;"	m	struct:yaffs_dirent
d_reclen	yaffsfs.h	/^    unsigned short d_reclen;    \/* length of this d_name *\/$/;"	m	struct:yaffs_dirent
data	yaffs_guts.h	/^	__u8 *data;$/;"	m	struct:__anon4
data	yaffs_guts.h	/^	__u8 data[YAFFS_BYTES_PER_CHUNK];$/;"	m	struct:__anon4
de	yaffsfs.c	/^	yaffs_dirent de;		\/* directory entry being used by this dsc *\/$/;"	m	struct:__anon27	file:
deferedFree	yaffs_guts.h	/^	__u8 deferedFree:1;	\/* For Linux kernel. Object is removed from NAND, but is$/;"	m	struct:yaffs_ObjectStruct
deleted	yaffs_guts.h	/^	__u8 deleted:1;		\/* This should only apply to unlinked files. *\/$/;"	m	struct:yaffs_ObjectStruct
deleted	yaffs_guts.h	/^	__u8 deleted:1;$/;"	m	struct:__anon20
deleted	yaffs_packedtags1.h	/^	unsigned deleted:1;$/;"	m	struct:__anon28
deletedDir	yaffs_guts.h	/^	yaffs_Object *deletedDir;	\/* Directory where deleted objects are sent to disappear. *\/$/;"	m	struct:yaffs_DeviceStruct
dev	yaffscfg.h	/^	struct yaffs_DeviceStruct *dev;$/;"	m	struct:__anon25	typeref:struct:__anon25::yaffs_DeviceStruct
devList	yaffs_guts.h	/^	struct list_head devList;$/;"	m	struct:yaffs_DeviceStruct	typeref:struct:yaffs_DeviceStruct::list_head
dirObj	yaffsfs.c	/^	yaffs_Object *dirObj;		\/* ptr to directory being searched *\/$/;"	m	struct:__anon27	file:
directoryVariant	yaffs_guts.h	/^	yaffs_DirectoryStructure directoryVariant;$/;"	m	union:__anon18
dirty	yaffs_guts.h	/^	__u8 dirty:1;		\/* the object needs to be written to flash *\/$/;"	m	struct:yaffs_ObjectStruct
dirty	yaffs_guts.h	/^	int dirty;$/;"	m	struct:__anon4
doingBufferedBlockRewrite	yaffs_guts.h	/^	int doingBufferedBlockRewrite;$/;"	m	struct:yaffs_DeviceStruct
ecc	yaffs_guts.h	/^	unsigned ecc:12;$/;"	m	struct:__anon5
ecc	yaffs_packedtags1.h	/^	unsigned ecc:12;$/;"	m	struct:__anon28
ecc	yaffs_packedtags2.h	/^	yaffs_ECCOther ecc;$/;"	m	struct:__anon2
ecc1	yaffs_guts.h	/^	__u8 ecc1[3];$/;"	m	struct:__anon10
ecc2	yaffs_guts.h	/^	__u8 ecc2[3];$/;"	m	struct:__anon10
eccFixed	yaffs_guts.h	/^	int eccFixed;$/;"	m	struct:yaffs_DeviceStruct
eccResult	yaffs_guts.h	/^	yaffs_ECCResult eccResult;$/;"	m	struct:__anon9
eccUnfixed	yaffs_guts.h	/^	int eccUnfixed;$/;"	m	struct:yaffs_DeviceStruct
eccres1	yaffs_guts.h	/^	int eccres1;$/;"	m	struct:yaffs_NANDSpare
eccres2	yaffs_guts.h	/^	int eccres2;$/;"	m	struct:yaffs_NANDSpare
endBlock	yaffs_guts.h	/^	int endBlock;		\/* End block we're allowed to use *\/$/;"	m	struct:yaffs_DeviceStruct
endBlock	yaffs_guts.h	/^	int endBlock;$/;"	m	struct:__anon22
equivalentObject	yaffs_guts.h	/^	struct yaffs_ObjectStruct *equivalentObject;$/;"	m	struct:__anon17	typeref:struct:__anon17::yaffs_ObjectStruct
equivalentObjectId	yaffs_guts.h	/^	__u32 equivalentObjectId;$/;"	m	struct:__anon17
equivalentObjectId	yaffs_guts.h	/^	int equivalentObjectId;$/;"	m	struct:__anon13
eraseBlockInNAND	yaffs_guts.h	/^	int (*eraseBlockInNAND) (struct yaffs_DeviceStruct * dev,$/;"	m	struct:yaffs_DeviceStruct
exclusive	yaffsfs.c	/^	__u8  exclusive:1;	\/\/ exclusive$/;"	m	struct:__anon26	file:
extraEquivalentObjectId	yaffs_guts.h	/^	unsigned extraEquivalentObjectId;	\/* Equivalent object Id if it is a hard link *\/$/;"	m	struct:__anon9
extraFileLength	yaffs_guts.h	/^	unsigned extraFileLength;		\/* Length if it is a file *\/$/;"	m	struct:__anon9
extraHeaderInfoAvailable	yaffs_guts.h	/^	unsigned extraHeaderInfoAvailable;	\/* There is extra info available if this is not zero *\/$/;"	m	struct:__anon9
extraIsShrinkHeader	yaffs_guts.h	/^	unsigned extraIsShrinkHeader;	\/* Is it a shrink header? *\/$/;"	m	struct:__anon9
extraObjectType	yaffs_guts.h	/^	yaffs_ObjectType extraObjectType;	\/* What object type? *\/$/;"	m	struct:__anon9
extraParentObjectId	yaffs_guts.h	/^	unsigned extraParentObjectId;	\/* The parent object *\/$/;"	m	struct:__anon9
extraShadows	yaffs_guts.h	/^	unsigned extraShadows;		\/* Does this shadow another object? *\/$/;"	m	struct:__anon9
fake	yaffs_guts.h	/^	__u8 fake:1;		\/* A fake object has no presence on NAND. *\/$/;"	m	struct:yaffs_ObjectStruct
fake	yaffs_guts.h	/^	__u8 fake:1;$/;"	m	struct:__anon20
fileSize	yaffs_guts.h	/^	__u32 fileSize;$/;"	m	struct:__anon14
fileSize	yaffs_guts.h	/^	int fileSize;$/;"	m	struct:__anon13
fileSizeOrEquivalentObjectId	yaffs_guts.h	/^	__u32 fileSizeOrEquivalentObjectId;$/;"	m	struct:__anon20
fileVariant	yaffs_guts.h	/^	yaffs_FileStructure fileVariant;$/;"	m	union:__anon18
freeObjects	yaffs_guts.h	/^	yaffs_Object *freeObjects;$/;"	m	struct:yaffs_DeviceStruct
freeTnodes	yaffs_guts.h	/^	yaffs_Tnode *freeTnodes;$/;"	m	struct:yaffs_DeviceStruct
garbageCollections	yaffs_guts.h	/^	int garbageCollections;$/;"	m	struct:yaffs_DeviceStruct
gcCleanupList	yaffs_guts.h	/^	__u32 *gcCleanupList;	\/* objects to delete at the end of a GC. *\/$/;"	m	struct:yaffs_DeviceStruct
gcPrioritise	yaffs_guts.h	/^	__u32 gcPrioritise: 1; 	\/* An ECC check or blank check has failed on this block.$/;"	m	struct:__anon12
genericDevice	yaffs_guts.h	/^	void *genericDevice;	\/* Pointer to device context$/;"	m	struct:yaffs_DeviceStruct
hardLinkVariant	yaffs_guts.h	/^	yaffs_HardLinkStructure hardLinkVariant;$/;"	m	union:__anon18
hardLinks	yaffs_guts.h	/^	struct list_head hardLinks;	\/* all the equivalent hard linked objects *\/$/;"	m	struct:yaffs_ObjectStruct	typeref:struct:yaffs_ObjectStruct::list_head
hasPendingPrioritisedGCs	yaffs_guts.h	/^	int hasPendingPrioritisedGCs; \/* We think this device might have pending prioritised gcs *\/$/;"	m	struct:yaffs_DeviceStruct
hasShrinkHeader	yaffs_guts.h	/^	__u32 hasShrinkHeader:1; \/* This block has at least one shrink object header *\/$/;"	m	struct:__anon12
hashLink	yaffs_guts.h	/^	struct list_head hashLink;	\/* list of objects in this hash bucket *\/$/;"	m	struct:yaffs_ObjectStruct	typeref:struct:yaffs_ObjectStruct::list_head
head	yaffs_guts.h	/^    __u32 head;$/;"	m	struct:__anon24
ia_atime	devextras.h	/^	unsigned ia_atime;$/;"	m	struct:iattr
ia_attr_flags	devextras.h	/^	unsigned int ia_attr_flags;$/;"	m	struct:iattr
ia_ctime	devextras.h	/^	unsigned ia_ctime;$/;"	m	struct:iattr
ia_gid	devextras.h	/^	unsigned ia_gid;$/;"	m	struct:iattr
ia_mode	devextras.h	/^	unsigned ia_mode;$/;"	m	struct:iattr
ia_mtime	devextras.h	/^	unsigned ia_mtime;$/;"	m	struct:iattr
ia_size	devextras.h	/^	unsigned ia_size;$/;"	m	struct:iattr
ia_uid	devextras.h	/^	unsigned ia_uid;$/;"	m	struct:iattr
ia_valid	devextras.h	/^	unsigned int ia_valid;$/;"	m	struct:iattr
iattr	devextras.h	/^struct iattr {$/;"	s
inUse	yaffs_guts.h	/^	__u32 inUse;$/;"	m	struct:yaffs_ObjectStruct
inUse	yaffsfs.c	/^	__u8  inUse:1;		\/\/ this handle is in use$/;"	m	struct:__anon26	file:
initialiseNAND	yaffs_guts.h	/^	int (*initialiseNAND) (struct yaffs_DeviceStruct * dev);$/;"	m	struct:yaffs_DeviceStruct
internal	yaffs_guts.h	/^	union yaffs_Tnode_union *internal[YAFFS_NTNODES_INTERNAL + 1];$/;"	m	union:yaffs_Tnode_union	typeref:union:yaffs_Tnode_union::yaffs_Tnode_union
internalEndBlock	yaffs_guts.h	/^	int internalEndBlock;$/;"	m	struct:yaffs_DeviceStruct
internalStartBlock	yaffs_guts.h	/^	int internalStartBlock;$/;"	m	struct:yaffs_DeviceStruct
isCheckpointed	yaffs_guts.h	/^	int isCheckpointed;$/;"	m	struct:yaffs_DeviceStruct
isDoingGC	yaffs_guts.h	/^	int isDoingGC;$/;"	m	struct:yaffs_DeviceStruct
isMounted	yaffs_guts.h	/^	int isMounted;$/;"	m	struct:yaffs_DeviceStruct
isMounted	yaffscfg.c	/^static int isMounted = 0;$/;"	v	file:
isShrink	yaffs_guts.h	/^	__u32 isShrink;$/;"	m	struct:__anon13
isYaffs2	yaffs_guts.h	/^	int isYaffs2;$/;"	m	struct:yaffs_DeviceStruct
lastUse	yaffs_guts.h	/^	int lastUse;$/;"	m	struct:__anon4
lazyLoaded	yaffs_guts.h	/^	__u8 lazyLoaded:1;	\/* This object has been lazy loaded and is missing some detail *\/$/;"	m	struct:yaffs_ObjectStruct
line	yaffs_guts.h	/^	int line;	\/* track from whence this buffer was allocated *\/$/;"	m	struct:__anon21
lineParity	yaffs_ecc.h	/^	unsigned lineParity;$/;"	m	struct:__anon29
lineParityPrime	yaffs_ecc.h	/^	unsigned lineParityPrime;$/;"	m	struct:__anon29
list	yaffs_guts.h	/^	struct list_head list;$/;"	m	struct:__anon19	typeref:struct:__anon19::list_head
list_add	devextras.h	/^static __inline__ void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	devextras.h	/^static __inline__ void list_add_tail(struct list_head *new,$/;"	f
list_del	devextras.h	/^static __inline__ void list_del(struct list_head *entry)$/;"	f
list_del_init	devextras.h	/^static __inline__ void list_del_init(struct list_head *entry)$/;"	f
list_empty	devextras.h	/^static __inline__ int list_empty(struct list_head *head)$/;"	f
list_entry	devextras.h	185;"	d
list_for_each	devextras.h	193;"	d
list_for_each_safe	devextras.h	204;"	d
list_head	devextras.h	/^struct list_head {$/;"	s
list_splice	devextras.h	/^static __inline__ void list_splice(struct list_head *list,$/;"	f
locked	yaffs_guts.h	/^	int locked;		\/* Can't push out or flush while locked. *\/$/;"	m	struct:__anon4
lostNFoundDir	yaffs_guts.h	/^	yaffs_Object *lostNFoundDir;$/;"	m	struct:yaffs_DeviceStruct
magic	yaffs_guts.h	/^    __u32 magic;$/;"	m	struct:__anon24
magic	yaffsfs.c	/^	__u32 magic;$/;"	m	struct:__anon27	file:
make_a_file	yaffscfg.c	/^void make_a_file(char *yaffsName,char bval,int sizeOfFile)$/;"	f
markNANDBlockBad	yaffs_guts.h	/^	int (*markNANDBlockBad) (struct yaffs_DeviceStruct * dev, int blockNo);$/;"	m	struct:yaffs_DeviceStruct
markSuperBlockDirty	yaffs_guts.h	/^	void (*markSuperBlockDirty)(void * superblock);$/;"	m	struct:yaffs_DeviceStruct
maxLine	yaffs_guts.h	/^	int maxLine;$/;"	m	struct:__anon21
maxTemp	yaffs_guts.h	/^	int maxTemp;$/;"	m	struct:yaffs_DeviceStruct
med3	yaffs_qsort.c	/^med3(char *a, char *b, char *c, int (*cmp)(const void *, const void *))$/;"	f	file:
min	yaffs_qsort.c	81;"	d	file:
myDev	yaffs_guts.h	/^	struct yaffs_DeviceStruct *myDev;	\/* The device I'm on *\/$/;"	m	struct:yaffs_ObjectStruct	typeref:struct:yaffs_ObjectStruct::yaffs_DeviceStruct
myInode	yaffs_guts.h	/^	struct inode *myInode;$/;"	m	struct:yaffs_ObjectStruct	typeref:struct:yaffs_ObjectStruct::inode
nBackgroundDeletions	yaffs_guts.h	/^	int nBackgroundDeletions;	\/* Count of background deletions. *\/$/;"	m	struct:__anon23
nBackgroundDeletions	yaffs_guts.h	/^	int nBackgroundDeletions;	\/* Count of background deletions. *\/$/;"	m	struct:yaffs_DeviceStruct
nBlockErasures	yaffs_guts.h	/^	int nBlockErasures;$/;"	m	struct:yaffs_DeviceStruct
nBytes	yaffs_guts.h	/^	int nBytes;		\/* Only valid if the cache is dirty *\/$/;"	m	struct:__anon4
nBytesPerSpare	yaffs_guts.h	/^	int nBytesPerSpare;	\/* spare area size *\/$/;"	m	struct:yaffs_DeviceStruct
nCheckpointReservedBlocks	yaffs_guts.h	/^	int nCheckpointReservedBlocks; \/* Blocks to reserve for checkpoint data *\/$/;"	m	struct:yaffs_DeviceStruct
nChunksPerBlock	yaffs_guts.h	/^	int nChunksPerBlock;	\/* does not need to be a power of 2 *\/$/;"	m	struct:yaffs_DeviceStruct
nDataBytesPerChunk	yaffs_guts.h	/^	int nDataBytesPerChunk;	\/* Should be a power of 2 >= 512 *\/$/;"	m	struct:yaffs_DeviceStruct
nDataChunks	yaffs_guts.h	/^	int nDataChunks;	\/* Number of data chunks attached to the file. *\/$/;"	m	struct:yaffs_ObjectStruct
nDataChunks	yaffs_guts.h	/^	int nDataChunks;$/;"	m	struct:__anon20
nDeletedFiles	yaffs_guts.h	/^	int nDeletedFiles;		\/* Count of files awaiting deletion;*\/$/;"	m	struct:__anon23
nDeletedFiles	yaffs_guts.h	/^	int nDeletedFiles;		\/* Count of files awaiting deletion;*\/$/;"	m	struct:yaffs_DeviceStruct
nDeletions	yaffs_guts.h	/^	int nDeletions;$/;"	m	struct:yaffs_DeviceStruct
nErasedBlocks	yaffs_guts.h	/^	int nErasedBlocks;$/;"	m	struct:__anon23
nErasedBlocks	yaffs_guts.h	/^	int nErasedBlocks;$/;"	m	struct:yaffs_DeviceStruct
nErasureFailures	yaffs_guts.h	/^	int nErasureFailures;$/;"	m	struct:yaffs_DeviceStruct
nFreeChunks	yaffs_guts.h	/^	int nFreeChunks;$/;"	m	struct:__anon23
nFreeChunks	yaffs_guts.h	/^	int nFreeChunks;$/;"	m	struct:yaffs_DeviceStruct
nFreeObjects	yaffs_guts.h	/^	int nFreeObjects;$/;"	m	struct:yaffs_DeviceStruct
nFreeTnodes	yaffs_guts.h	/^	int nFreeTnodes;$/;"	m	struct:yaffs_DeviceStruct
nGCCopies	yaffs_guts.h	/^	int nGCCopies;$/;"	m	struct:yaffs_DeviceStruct
nObjectsCreated	yaffs_guts.h	/^	int nObjectsCreated;$/;"	m	struct:yaffs_DeviceStruct
nPageReads	yaffs_guts.h	/^	int nPageReads;$/;"	m	struct:yaffs_DeviceStruct
nPageWrites	yaffs_guts.h	/^	int nPageWrites;$/;"	m	struct:yaffs_DeviceStruct
nReservedBlocks	yaffs_guts.h	/^	int nReservedBlocks;	\/* We want this tuneable so that we can reduce *\/$/;"	m	struct:yaffs_DeviceStruct
nRetiredBlocks	yaffs_guts.h	/^	int nRetiredBlocks;$/;"	m	struct:yaffs_DeviceStruct
nRetriedWrites	yaffs_guts.h	/^	int nRetriedWrites;$/;"	m	struct:yaffs_DeviceStruct
nShortOpCaches	yaffs_guts.h	/^	int nShortOpCaches;	\/* If <= 0, then short op caching is disabled, else$/;"	m	struct:yaffs_DeviceStruct
nTnodesCreated	yaffs_guts.h	/^	int nTnodesCreated;$/;"	m	struct:yaffs_DeviceStruct
nUnlinkedFiles	yaffs_guts.h	/^	int nUnlinkedFiles;		\/* Count of unlinked files. *\/$/;"	m	struct:__anon23
nUnlinkedFiles	yaffs_guts.h	/^	int nUnlinkedFiles;		\/* Count of unlinked files. *\/$/;"	m	struct:yaffs_DeviceStruct
nUnmarkedDeletions	yaffs_guts.h	/^	int nUnmarkedDeletions;$/;"	m	struct:yaffs_DeviceStruct
name	yaffs_guts.h	/^	YCHAR name[YAFFS_MAX_NAME_LENGTH + 1];$/;"	m	struct:__anon13
name	yaffs_guts.h	/^	const char *name;$/;"	m	struct:yaffs_DeviceStruct
name	yaffsfs.c	/^	char name[NAME_MAX+1];		\/* name of directory being searched *\/$/;"	m	struct:__anon27	file:
nandmtd2_MarkNANDBlockBad	yaffs_mtdif2.c	/^int nandmtd2_MarkNANDBlockBad(struct yaffs_DeviceStruct *dev, int blockNo)$/;"	f
nandmtd2_QueryNANDBlock	yaffs_mtdif2.c	/^int nandmtd2_QueryNANDBlock(struct yaffs_DeviceStruct *dev, int blockNo,$/;"	f
nandmtd2_ReadChunkWithTagsFromNAND	yaffs_mtdif2.c	/^int nandmtd2_ReadChunkWithTagsFromNAND(yaffs_Device * dev, int chunkInNAND,$/;"	f
nandmtd2_WriteChunkWithTagsToNAND	yaffs_mtdif2.c	/^int nandmtd2_WriteChunkWithTagsToNAND(yaffs_Device * dev, int chunkInNAND,$/;"	f
nandmtd_EraseBlockInNAND	yaffs_mtdif.c	/^int nandmtd_EraseBlockInNAND(yaffs_Device * dev, int blockNumber)$/;"	f
nandmtd_InitialiseNAND	yaffs_mtdif.c	/^int nandmtd_InitialiseNAND(yaffs_Device * dev)$/;"	f
nandmtd_ReadChunkFromNAND	yaffs_mtdif.c	/^int nandmtd_ReadChunkFromNAND(yaffs_Device * dev, int chunkInNAND, __u8 * data,$/;"	f
nandmtd_WriteChunkToNAND	yaffs_mtdif.c	/^int nandmtd_WriteChunkToNAND(yaffs_Device * dev, int chunkInNAND,$/;"	f
needsRetiring	yaffs_guts.h	/^	__u32 needsRetiring:1;	\/* Data has failed on this block, need to get valid data off *\/$/;"	m	struct:__anon12
new	devextras.h	272;"	d
new	devextras.h	28;"	d
next	devextras.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	yaffs_guts.h	/^	struct yaffs_ObjectList_struct *next;$/;"	m	struct:yaffs_ObjectList_struct	typeref:struct:yaffs_ObjectList_struct::yaffs_ObjectList_struct
next	yaffs_guts.h	/^	struct yaffs_TnodeList_struct *next;$/;"	m	struct:yaffs_TnodeList_struct	typeref:struct:yaffs_TnodeList_struct::yaffs_TnodeList_struct
nextReturn	yaffsfs.c	/^	yaffs_Object *nextReturn;	\/* obj to be returned by next readddir *\/$/;"	m	struct:__anon27	file:
nonAggressiveSkip	yaffs_guts.h	/^	int nonAggressiveSkip;	\/* GC state\/mode *\/$/;"	m	struct:yaffs_DeviceStruct
notForWinCE	yaffs_guts.h	/^	__u32 notForWinCE[5];$/;"	m	struct:__anon13
obj	yaffsfs.c	/^	yaffs_Object *obj;	\/\/ the object$/;"	m	struct:__anon26	file:
object	yaffs_guts.h	/^	struct yaffs_ObjectStruct *object;$/;"	m	struct:__anon4	typeref:struct:__anon4::yaffs_ObjectStruct
objectBucket	yaffs_guts.h	/^	yaffs_ObjectBucket objectBucket[YAFFS_NOBJECT_BUCKETS];$/;"	m	struct:yaffs_DeviceStruct
objectId	yaffs_guts.h	/^	__u32 objectId;		\/* the object id value *\/$/;"	m	struct:yaffs_ObjectStruct
objectId	yaffs_guts.h	/^	__u32 objectId;$/;"	m	struct:__anon20
objectId	yaffs_guts.h	/^	unsigned objectId:18;$/;"	m	struct:__anon5
objectId	yaffs_guts.h	/^	unsigned objectId;	\/* If 0 then this is not part of an object (unused) *\/$/;"	m	struct:__anon9
objectId	yaffs_packedtags1.h	/^	unsigned objectId:18;$/;"	m	struct:__anon28
objectId	yaffs_packedtags2.h	/^	unsigned objectId;$/;"	m	struct:__anon1
objects	yaffs_guts.h	/^	yaffs_Object *objects;$/;"	m	struct:yaffs_ObjectList_struct
offset	yaffsfs.c	/^	int offset;$/;"	m	struct:__anon27	file:
oldestDirtySequence	yaffs_guts.h	/^	unsigned oldestDirtySequence;$/;"	m	struct:__anon23
oldestDirtySequence	yaffs_guts.h	/^	unsigned oldestDirtySequence;$/;"	m	struct:yaffs_DeviceStruct
others	yaffsfs.c	/^	struct list_head others;$/;"	m	struct:__anon27	typeref:struct:__anon27::list_head	file:
pageStatus	yaffs_guts.h	/^	__u8 pageStatus;	\/* set to 0 to delete the chunk *\/$/;"	m	struct:__anon10
pagesInUse	yaffs_guts.h	/^	int pagesInUse:10;	\/* number of pages in use *\/$/;"	m	struct:__anon12
parent	yaffs_guts.h	/^	struct yaffs_ObjectStruct *parent;$/;"	m	struct:yaffs_ObjectStruct	typeref:struct:yaffs_ObjectStruct::yaffs_ObjectStruct
parentId	yaffs_guts.h	/^	__u32 parentId;$/;"	m	struct:__anon20
parentObjectId	yaffs_guts.h	/^	int parentObjectId;$/;"	m	struct:__anon13
passiveGarbageCollections	yaffs_guts.h	/^	int passiveGarbageCollections;$/;"	m	struct:yaffs_DeviceStruct
position	yaffsfs.c	/^	__u32 position;		\/\/ current position in file$/;"	m	struct:__anon26	file:
prefetch	devextras.h	55;"	d
prefix	yaffscfg.h	/^	const char *prefix;$/;"	m	struct:__anon25
prev	devextras.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
queryNANDBlock	yaffs_guts.h	/^	int (*queryNANDBlock) (struct yaffs_DeviceStruct * dev, int blockNo,$/;"	m	struct:yaffs_DeviceStruct
readChunkFromNAND	yaffs_guts.h	/^	int (*readChunkFromNAND) (struct yaffs_DeviceStruct * dev,$/;"	m	struct:yaffs_DeviceStruct
readChunkWithTagsFromNAND	yaffs_guts.h	/^	int (*readChunkWithTagsFromNAND) (struct yaffs_DeviceStruct * dev,$/;"	m	struct:yaffs_DeviceStruct
readOnly	yaffsfs.c	/^	__u8  readOnly:1;	\/\/ this handle is read only$/;"	m	struct:__anon26	file:
read_a_file	yaffscfg.c	/^void read_a_file(char *fn)$/;"	f
removeObjectCallback	yaffs_guts.h	/^	void (*removeObjectCallback)(struct yaffs_ObjectStruct *obj);$/;"	m	struct:yaffs_DeviceStruct
renameAllowed	yaffs_guts.h	/^	__u8 renameAllowed:1;	\/* Some objects are not allowed to be renamed. *\/$/;"	m	struct:yaffs_ObjectStruct
renameAllowed	yaffs_guts.h	/^	__u8 renameAllowed:1;$/;"	m	struct:__anon20
rfu	yaffs_guts.h	/^	int rfu[100];$/;"	m	struct:__anon22
roomToGrow	yaffs_guts.h	/^	__u32 roomToGrow[10];$/;"	m	struct:__anon13
roomToGrow	yaffs_guts.h	/^	__u32 roomToGrow[4];$/;"	m	struct:__anon13
rootDir	yaffs_guts.h	/^	yaffs_Object *rootDir;$/;"	m	struct:yaffs_DeviceStruct
scannedFileSize	yaffs_guts.h	/^	__u32 scannedFileSize;$/;"	m	struct:__anon14
search_contexts	yaffsfs.c	/^static struct list_head search_contexts;$/;"	v	typeref:struct:list_head	file:
seq	yaffs_guts.c	/^	int seq;$/;"	m	struct:__anon3	file:
sequenceNumber	yaffs_guts.h	/^	__u32 sequenceNumber;	 \/* block sequence number for yaffs2 *\/$/;"	m	struct:__anon12
sequenceNumber	yaffs_guts.h	/^	unsigned sequenceNumber;	\/* Sequence number of currently allocating block *\/$/;"	m	struct:__anon23
sequenceNumber	yaffs_guts.h	/^	unsigned sequenceNumber;	\/* Sequence number of currently allocating block *\/$/;"	m	struct:yaffs_DeviceStruct
sequenceNumber	yaffs_guts.h	/^	unsigned sequenceNumber;	\/* The sequence number of this block *\/$/;"	m	struct:__anon9
sequenceNumber	yaffs_packedtags2.h	/^	unsigned sequenceNumber;$/;"	m	struct:__anon1
serial	yaffs_guts.h	/^	__u8 serial;		\/* serial number of chunk in NAND. Cached here *\/$/;"	m	struct:yaffs_ObjectStruct
serial	yaffs_guts.h	/^	__u8 serial;$/;"	m	struct:__anon20
serialNumber	yaffs_guts.h	/^	unsigned serialNumber:2;$/;"	m	struct:__anon5
serialNumber	yaffs_guts.h	/^	unsigned serialNumber;	\/* Yaffs1 2-bit serial number *\/$/;"	m	struct:__anon9
serialNumber	yaffs_packedtags1.h	/^	unsigned serialNumber:2;$/;"	m	struct:__anon28
shadowsObject	yaffs_guts.h	/^	int shadowsObject;	\/* This object header shadows the specified object if > 0 *\/$/;"	m	struct:__anon13
shortName	yaffs_guts.h	/^	YCHAR shortName[YAFFS_SHORT_NAME_LENGTH + 1];$/;"	m	struct:yaffs_ObjectStruct
shouldBeFF	yaffs_packedtags1.h	/^	unsigned shouldBeFF;$/;"	m	struct:__anon28
shrinkSize	yaffs_guts.h	/^	__u32 shrinkSize;$/;"	m	struct:__anon14
siblings	yaffs_guts.h	/^	struct list_head siblings;$/;"	m	struct:yaffs_ObjectStruct	typeref:struct:yaffs_ObjectStruct::list_head
skipCheckpointRead	yaffs_guts.h	/^	__u8 skipCheckpointRead;$/;"	m	struct:yaffs_DeviceStruct
skipCheckpointWrite	yaffs_guts.h	/^	__u8 skipCheckpointWrite;$/;"	m	struct:yaffs_DeviceStruct
skipErasedCheck	yaffs_guts.h	/^	__u32 skipErasedCheck: 1; \/* If this is set we can skip the erased check on this block *\/$/;"	m	struct:__anon12
softDeleted	yaffs_guts.h	/^	__u8 softDeleted:1;	\/* it has also been soft deleted *\/$/;"	m	struct:yaffs_ObjectStruct
softDeleted	yaffs_guts.h	/^	__u8 softDeleted:1;$/;"	m	struct:__anon20
softDeletions	yaffs_guts.h	/^	int softDeletions:10;	\/* number of soft deleted pages *\/$/;"	m	struct:__anon12
spare	yaffs_guts.h	/^	yaffs_Spare spare;$/;"	m	struct:yaffs_NANDSpare
spareBuffer	yaffs_guts.h	/^	__u8 *spareBuffer;	\/* For mtdif2 use. Don't know the size of the buffer$/;"	m	struct:yaffs_DeviceStruct
srCache	yaffs_guts.h	/^	yaffs_ChunkCache *srCache;$/;"	m	struct:yaffs_DeviceStruct
srLastUse	yaffs_guts.h	/^	int srLastUse;$/;"	m	struct:yaffs_DeviceStruct
st_blksize	yaffsfs.h	/^    unsigned long st_blksize;  \/* blocksize for filesystem I\/O *\/$/;"	m	struct:yaffs_stat
st_blocks	yaffsfs.h	/^    unsigned long st_blocks;   \/* number of blocks allocated *\/$/;"	m	struct:yaffs_stat
st_dev	yaffsfs.h	/^    int		      st_dev;      \/* device *\/$/;"	m	struct:yaffs_stat
st_gid	yaffsfs.h	/^    int           st_gid;      \/* group ID of owner *\/$/;"	m	struct:yaffs_stat
st_ino	yaffsfs.h	/^    int           st_ino;      \/* inode *\/$/;"	m	struct:yaffs_stat
st_mode	yaffsfs.h	/^    mode_t        st_mode;     \/* protection *\/$/;"	m	struct:yaffs_stat
st_nlink	yaffsfs.h	/^    int           st_nlink;    \/* number of hard links *\/$/;"	m	struct:yaffs_stat
st_rdev	yaffsfs.h	/^    unsigned      st_rdev;     \/* device type (if inode device) *\/$/;"	m	struct:yaffs_stat
st_size	yaffsfs.h	/^    off_t         st_size;     \/* total size, in bytes *\/$/;"	m	struct:yaffs_stat
st_uid	yaffsfs.h	/^    int           st_uid;      \/* user ID of owner *\/$/;"	m	struct:yaffs_stat
startBlock	yaffs_guts.h	/^	int startBlock;		\/* Start block we're allowed to use *\/$/;"	m	struct:yaffs_DeviceStruct
startBlock	yaffs_guts.h	/^	int startBlock;$/;"	m	struct:__anon22
structType	yaffs_guts.h	/^	int structType;$/;"	m	struct:__anon20
structType	yaffs_guts.h	/^	int structType;$/;"	m	struct:__anon23
structType	yaffs_guts.h	/^    int structType;$/;"	m	struct:__anon24
sum	yaffs_guts.h	/^	__u16 sum;		\/* sum of the name to speed searching *\/$/;"	m	struct:yaffs_ObjectStruct
sum__NoLongerUsed	yaffs_guts.h	/^	__u16 sum__NoLongerUsed;	\/* checksum of name. No longer used *\/$/;"	m	struct:__anon13
superBlock	yaffs_guts.h	/^	void *superBlock;$/;"	m	struct:yaffs_DeviceStruct
swap	yaffs_qsort.c	62;"	d	file:
swapcode	yaffs_qsort.c	39;"	d	file:
swapfunc	yaffs_qsort.c	/^swapfunc(char *a, char *b, int n, int swaptype)$/;"	f	file:
symLinkVariant	yaffs_guts.h	/^	yaffs_SymLinkStructure symLinkVariant;$/;"	m	union:__anon18
t	yaffs_packedtags2.h	/^	yaffs_PackedTags2TagsPart t;$/;"	m	struct:__anon2
tagByte0	yaffs_guts.h	/^	__u8 tagByte0;$/;"	m	struct:__anon10
tagByte1	yaffs_guts.h	/^	__u8 tagByte1;$/;"	m	struct:__anon10
tagByte2	yaffs_guts.h	/^	__u8 tagByte2;$/;"	m	struct:__anon10
tagByte3	yaffs_guts.h	/^	__u8 tagByte3;$/;"	m	struct:__anon10
tagByte4	yaffs_guts.h	/^	__u8 tagByte4;$/;"	m	struct:__anon10
tagByte5	yaffs_guts.h	/^	__u8 tagByte5;$/;"	m	struct:__anon10
tagByte6	yaffs_guts.h	/^	__u8 tagByte6;$/;"	m	struct:__anon10
tagByte7	yaffs_guts.h	/^	__u8 tagByte7;$/;"	m	struct:__anon10
tagsEccFixed	yaffs_guts.h	/^	int tagsEccFixed;$/;"	m	struct:yaffs_DeviceStruct
tagsEccUnfixed	yaffs_guts.h	/^	int tagsEccUnfixed;$/;"	m	struct:yaffs_DeviceStruct
tempBuffer	yaffs_guts.h	/^	yaffs_TempBuffer tempBuffer[YAFFS_N_TEMP_BUFFERS];$/;"	m	struct:yaffs_DeviceStruct
tnodeMask	yaffs_guts.h	/^	__u32 tnodeMask;$/;"	m	struct:yaffs_DeviceStruct
tnodeWidth	yaffs_guts.h	/^	__u32 tnodeWidth;$/;"	m	struct:yaffs_DeviceStruct
tnodes	yaffs_guts.h	/^	yaffs_Tnode *tnodes;$/;"	m	struct:yaffs_TnodeList_struct
top	yaffs_guts.h	/^	yaffs_Tnode *top;$/;"	m	struct:__anon14
topLevel	yaffs_guts.h	/^	int topLevel;$/;"	m	struct:__anon14
translate_oob2spare	yaffs_mtdif.c	/^static inline void translate_oob2spare(yaffs_Spare *spare, __u8 *oob)$/;"	f	file:
translate_spare2oob	yaffs_mtdif.c	/^static inline void translate_spare2oob(const yaffs_Spare *spare, __u8 *oob)$/;"	f	file:
type	yaffs_guts.h	/^	yaffs_ObjectType type;$/;"	m	struct:__anon13
unlinkAllowed	yaffs_guts.h	/^	__u8 unlinkAllowed:1;$/;"	m	struct:__anon20
unlinkAllowed	yaffs_guts.h	/^	__u8 unlinkAllowed:1;$/;"	m	struct:yaffs_ObjectStruct
unlinked	yaffs_guts.h	/^	__u8 unlinked:1;	\/* An unlinked file. The file should be in the unlinked directory.*\/$/;"	m	struct:yaffs_ObjectStruct
unlinked	yaffs_guts.h	/^	__u8 unlinked:1;$/;"	m	struct:__anon20
unlinkedDeletion	yaffs_guts.h	/^	yaffs_Object *unlinkedDeletion;	\/* Current file being background deleted.*\/$/;"	m	struct:yaffs_DeviceStruct
unlinkedDir	yaffs_guts.h	/^	yaffs_Object *unlinkedDir;	\/* Directory where unlinked and deleted files live. *\/$/;"	m	struct:yaffs_DeviceStruct
unmanagedTempAllocations	yaffs_guts.h	/^	int unmanagedTempAllocations;$/;"	m	struct:yaffs_DeviceStruct
unmanagedTempDeallocations	yaffs_guts.h	/^	int unmanagedTempDeallocations;$/;"	m	struct:yaffs_DeviceStruct
unusedStuff	yaffs_guts.h	/^	unsigned unusedStuff:2;$/;"	m	struct:__anon5
unusedStuff	yaffs_packedtags1.h	/^	unsigned unusedStuff:1;$/;"	m	struct:__anon28
useHeaderFileSize	yaffs_guts.h	/^	int useHeaderFileSize;	\/* Flag to determine if we should use file sizes from the header *\/$/;"	m	struct:yaffs_DeviceStruct
useNANDECC	yaffs_guts.h	/^	int useNANDECC;		\/* Flag to decide whether or not to use NANDECC *\/$/;"	m	struct:yaffs_DeviceStruct
valid	yaffs_guts.h	/^	__u8 valid:1;		\/* When the file system is being loaded up, this$/;"	m	struct:yaffs_ObjectStruct
validMarker0	yaffs_guts.h	/^	unsigned validMarker0;$/;"	m	struct:__anon9
validMarker1	yaffs_guts.h	/^	unsigned validMarker1;$/;"	m	struct:__anon9
variant	yaffs_guts.h	/^	yaffs_ObjectVariant variant;$/;"	m	struct:yaffs_ObjectStruct
variantType	yaffs_guts.h	/^	yaffs_ObjectType variantType:3;$/;"	m	struct:__anon20
variantType	yaffs_guts.h	/^	yaffs_ObjectType variantType;$/;"	m	struct:yaffs_ObjectStruct
vecswap	yaffs_qsort.c	70;"	d	file:
version	yaffs_guts.h	/^	int version;$/;"	m	struct:__anon22
version	yaffs_guts.h	/^    __u32 version;$/;"	m	struct:__anon24
wideTnodesDisabled	yaffs_guts.h	/^	int wideTnodesDisabled; \/* Set to disable wide tnodes *\/$/;"	m	struct:yaffs_DeviceStruct
win_atime	yaffs_guts.h	/^	__u32 win_atime[2];$/;"	m	struct:__anon13
win_atime	yaffs_guts.h	/^	__u32 win_atime[2];$/;"	m	struct:yaffs_ObjectStruct
win_ctime	yaffs_guts.h	/^	__u32 win_ctime[2];$/;"	m	struct:__anon13
win_ctime	yaffs_guts.h	/^	__u32 win_ctime[2];$/;"	m	struct:yaffs_ObjectStruct
win_mtime	yaffs_guts.h	/^	__u32 win_mtime[2];$/;"	m	struct:__anon13
win_mtime	yaffs_guts.h	/^	__u32 win_mtime[2];$/;"	m	struct:yaffs_ObjectStruct
writeChunkToNAND	yaffs_guts.h	/^	int (*writeChunkToNAND) (struct yaffs_DeviceStruct * dev,$/;"	m	struct:yaffs_DeviceStruct
writeChunkWithTagsToNAND	yaffs_guts.h	/^	int (*writeChunkWithTagsToNAND) (struct yaffs_DeviceStruct * dev,$/;"	m	struct:yaffs_DeviceStruct
yaffs_AddObjectToDirectory	yaffs_guts.c	/^static void yaffs_AddObjectToDirectory(yaffs_Object * directory,$/;"	f	file:
yaffs_AddOrFindLevel0Tnode	yaffs_guts.c	/^static yaffs_Tnode *yaffs_AddOrFindLevel0Tnode(yaffs_Device * dev,$/;"	f	file:
yaffs_AddrToChunk	yaffs_guts.c	/^static void yaffs_AddrToChunk(yaffs_Device *dev, loff_t addr, __u32 *chunk, __u32 *offset)$/;"	f	file:
yaffs_AllocateChunk	yaffs_guts.c	/^static int yaffs_AllocateChunk(yaffs_Device * dev, int useReserve, yaffs_BlockInfo **blockUsedPtr)$/;"	f	file:
yaffs_AllocateEmptyObject	yaffs_guts.c	/^static yaffs_Object *yaffs_AllocateEmptyObject(yaffs_Device * dev)$/;"	f	file:
yaffs_BlockBecameDirty	yaffs_guts.c	/^static void yaffs_BlockBecameDirty(yaffs_Device * dev, int blockNo)$/;"	f	file:
yaffs_BlockBits	yaffs_guts.c	/^static Y_INLINE __u8 *yaffs_BlockBits(yaffs_Device * dev, int blk)$/;"	f	file:
yaffs_BlockIndex	yaffs_guts.c	/^} yaffs_BlockIndex;$/;"	t	typeref:struct:__anon3	file:
yaffs_BlockInfo	yaffs_guts.h	/^} yaffs_BlockInfo;$/;"	t	typeref:struct:__anon12
yaffs_BlockNotDisqualifiedFromGC	yaffs_guts.c	/^static int yaffs_BlockNotDisqualifiedFromGC(yaffs_Device * dev,$/;"	f	file:
yaffs_BlockState	yaffs_guts.h	/^} yaffs_BlockState;$/;"	t	typeref:enum:__anon11
yaffs_CalcECC	yaffs_tagscompat.c	/^void yaffs_CalcECC(const __u8 * data, yaffs_Spare * spare)$/;"	f
yaffs_CalcNameSum	yaffs_guts.c	/^static __u16 yaffs_CalcNameSum(const YCHAR * name)$/;"	f	file:
yaffs_CalcTagsECC	yaffs_tagscompat.c	/^void yaffs_CalcTagsECC(yaffs_Tags * tags)$/;"	f
yaffs_ChangeObjectName	yaffs_guts.c	/^static int yaffs_ChangeObjectName(yaffs_Object * obj, yaffs_Object * newDir,$/;"	f	file:
yaffs_CheckChunkBit	yaffs_guts.c	/^static Y_INLINE int yaffs_CheckChunkBit(yaffs_Device * dev, int blk, int chunk)$/;"	f	file:
yaffs_CheckChunkErased	yaffs_guts.c	/^static int yaffs_CheckChunkErased(struct yaffs_DeviceStruct *dev,$/;"	f	file:
yaffs_CheckChunkErased	yaffs_tagscompat.c	/^static int yaffs_CheckChunkErased(struct yaffs_DeviceStruct *dev,$/;"	f	file:
yaffs_CheckDevFunctions	yaffs_guts.c	/^static int yaffs_CheckDevFunctions(const yaffs_Device * dev)$/;"	f	file:
yaffs_CheckECCOnTags	yaffs_tagscompat.c	/^int yaffs_CheckECCOnTags(yaffs_Tags * tags)$/;"	f
yaffs_CheckFF	yaffs_guts.c	/^int yaffs_CheckFF(__u8 * buffer, int nBytes)$/;"	f
yaffs_CheckFileSanity	yaffs_guts.c	/^static int yaffs_CheckFileSanity(yaffs_Object * in)$/;"	f	file:
yaffs_CheckFileSanity	yaffs_guts.c	109;"	d	file:
yaffs_CheckGarbageCollection	yaffs_guts.c	/^static int yaffs_CheckGarbageCollection(yaffs_Device * dev)$/;"	f	file:
yaffs_CheckObjectDetailsLoaded	yaffs_guts.c	/^static void yaffs_CheckObjectDetailsLoaded(yaffs_Object *in)$/;"	f	file:
yaffs_CheckSpaceForAllocation	yaffs_guts.c	/^static int yaffs_CheckSpaceForAllocation(yaffs_Device * dev)$/;"	f	file:
yaffs_CheckStruct	yaffs_guts.c	7310;"	d	file:
yaffs_CheckStructures	yaffs_guts.c	/^static int yaffs_CheckStructures(void)$/;"	f	file:
yaffs_CheckWrittenBlock	yaffs_tagscompat.c	/^static void yaffs_CheckWrittenBlock(yaffs_Device * dev, int chunkInNAND)$/;"	f	file:
yaffs_CheckpointClose	yaffs_checkptrw.c	/^int yaffs_CheckpointClose(yaffs_Device *dev)$/;"	f
yaffs_CheckpointDevice	yaffs_guts.h	/^} yaffs_CheckpointDevice;$/;"	t	typeref:struct:__anon23
yaffs_CheckpointDeviceToDevice	yaffs_guts.c	/^static void yaffs_CheckpointDeviceToDevice(yaffs_Device *dev,$/;"	f	file:
yaffs_CheckpointErase	yaffs_checkptrw.c	/^static int yaffs_CheckpointErase(yaffs_Device *dev)$/;"	f	file:
yaffs_CheckpointFindNextCheckpointBlock	yaffs_checkptrw.c	/^static void yaffs_CheckpointFindNextCheckpointBlock(yaffs_Device *dev)$/;"	f	file:
yaffs_CheckpointFindNextErasedBlock	yaffs_checkptrw.c	/^static void yaffs_CheckpointFindNextErasedBlock(yaffs_Device *dev)$/;"	f	file:
yaffs_CheckpointFlushBuffer	yaffs_checkptrw.c	/^static int yaffs_CheckpointFlushBuffer(yaffs_Device *dev)$/;"	f	file:
yaffs_CheckpointInvalidateStream	yaffs_checkptrw.c	/^int yaffs_CheckpointInvalidateStream(yaffs_Device *dev)$/;"	f
yaffs_CheckpointObject	yaffs_guts.h	/^}yaffs_CheckpointObject;$/;"	t	typeref:struct:__anon20
yaffs_CheckpointObjectToObject	yaffs_guts.c	/^static void yaffs_CheckpointObjectToObject( yaffs_Object *obj,yaffs_CheckpointObject *cp)$/;"	f	file:
yaffs_CheckpointOpen	yaffs_checkptrw.c	/^int yaffs_CheckpointOpen(yaffs_Device *dev, int forWriting)$/;"	f
yaffs_CheckpointRead	yaffs_checkptrw.c	/^int yaffs_CheckpointRead(yaffs_Device *dev, void *data, int nBytes)$/;"	f
yaffs_CheckpointRestore	yaffs_guts.c	/^int yaffs_CheckpointRestore(yaffs_Device *dev)$/;"	f
yaffs_CheckpointSave	yaffs_guts.c	/^int yaffs_CheckpointSave(yaffs_Device *dev)$/;"	f
yaffs_CheckpointSpaceOk	yaffs_checkptrw.c	/^static int yaffs_CheckpointSpaceOk(yaffs_Device *dev)$/;"	f	file:
yaffs_CheckpointTnodeWorker	yaffs_guts.c	/^static int yaffs_CheckpointTnodeWorker(yaffs_Object * in, yaffs_Tnode * tn,$/;"	f	file:
yaffs_CheckpointValidity	yaffs_guts.h	/^} yaffs_CheckpointValidity;$/;"	t	typeref:struct:__anon24
yaffs_CheckpointWrite	yaffs_checkptrw.c	/^int yaffs_CheckpointWrite(yaffs_Device *dev,const void *data, int nBytes)$/;"	f
yaffs_ChunkCache	yaffs_guts.h	/^} yaffs_ChunkCache;$/;"	t	typeref:struct:__anon4
yaffs_ClearChunkBit	yaffs_guts.c	/^static Y_INLINE void yaffs_ClearChunkBit(yaffs_Device * dev, int blk, int chunk)$/;"	f	file:
yaffs_ClearChunkBits	yaffs_guts.c	/^static Y_INLINE void yaffs_ClearChunkBits(yaffs_Device * dev, int blk)$/;"	f	file:
yaffs_CloneString	yaffs_guts.c	/^static YCHAR *yaffs_CloneString(const YCHAR * str)$/;"	f	file:
yaffs_CountBits	yaffs_ecc.c	/^static int yaffs_CountBits(unsigned char x)$/;"	f	file:
yaffs_CountBits	yaffs_tagscompat.c	/^int yaffs_CountBits(__u8 x)$/;"	f
yaffs_CountBits32	yaffs_ecc.c	/^static int yaffs_CountBits32(unsigned x)$/;"	f	file:
yaffs_CountChunkBits	yaffs_guts.c	/^static int yaffs_CountChunkBits(yaffs_Device * dev, int blk)$/;"	f	file:
yaffs_CountFreeChunks	yaffs_guts.c	/^static int yaffs_CountFreeChunks(yaffs_Device * dev)$/;"	f	file:
yaffs_CreateFakeDirectory	yaffs_guts.c	/^static yaffs_Object *yaffs_CreateFakeDirectory(yaffs_Device * dev, int number,$/;"	f	file:
yaffs_CreateFreeObjects	yaffs_guts.c	/^static int yaffs_CreateFreeObjects(yaffs_Device * dev, int nObjects)$/;"	f	file:
yaffs_CreateInitialDirectories	yaffs_guts.c	/^static int yaffs_CreateInitialDirectories(yaffs_Device *dev)$/;"	f	file:
yaffs_CreateNewObject	yaffs_guts.c	/^yaffs_Object *yaffs_CreateNewObject(yaffs_Device * dev, int number,$/;"	f
yaffs_CreateNewObjectNumber	yaffs_guts.c	/^static int yaffs_CreateNewObjectNumber(yaffs_Device * dev)$/;"	f	file:
yaffs_CreateTnodes	yaffs_guts.c	/^static int yaffs_CreateTnodes(yaffs_Device * dev, int nTnodes)$/;"	f	file:
yaffs_DIR	yaffsfs.h	/^typedef struct __opaque yaffs_DIR;$/;"	t	typeref:struct:__opaque
yaffs_Deinitialise	yaffs_guts.c	/^void yaffs_Deinitialise(yaffs_Device * dev)$/;"	f
yaffs_DeinitialiseBlocks	yaffs_guts.c	/^static void yaffs_DeinitialiseBlocks(yaffs_Device * dev)$/;"	f	file:
yaffs_DeinitialiseObjects	yaffs_guts.c	/^static void yaffs_DeinitialiseObjects(yaffs_Device * dev)$/;"	f	file:
yaffs_DeinitialiseTnodes	yaffs_guts.c	/^static void yaffs_DeinitialiseTnodes(yaffs_Device * dev)$/;"	f	file:
yaffs_DeleteChunk	yaffs_guts.c	/^void yaffs_DeleteChunk(yaffs_Device * dev, int chunkId, int markNAND, int lyn)$/;"	f
yaffs_DeleteDirectory	yaffs_guts.c	/^static int yaffs_DeleteDirectory(yaffs_Object * in)$/;"	f	file:
yaffs_DeleteFile	yaffs_guts.c	/^int yaffs_DeleteFile(yaffs_Object * in)$/;"	f
yaffs_DeleteHardLink	yaffs_guts.c	/^static int yaffs_DeleteHardLink(yaffs_Object * in)$/;"	f	file:
yaffs_DeleteSymLink	yaffs_guts.c	/^static int yaffs_DeleteSymLink(yaffs_Object * in)$/;"	f	file:
yaffs_DestroyObject	yaffs_guts.c	/^static void yaffs_DestroyObject(yaffs_Object * obj)$/;"	f	file:
yaffs_Device	yaffs_guts.h	/^typedef struct yaffs_DeviceStruct yaffs_Device;$/;"	t	typeref:struct:yaffs_DeviceStruct
yaffs_DeviceStruct	yaffs_guts.h	/^struct yaffs_DeviceStruct {$/;"	s
yaffs_DeviceToCheckpointDevice	yaffs_guts.c	/^static void yaffs_DeviceToCheckpointDevice(yaffs_CheckpointDevice *cp,$/;"	f	file:
yaffs_DirectoryStructure	yaffs_guts.h	/^} yaffs_DirectoryStructure;$/;"	t	typeref:struct:__anon15
yaffs_DoGenericObjectDeletion	yaffs_guts.c	/^static int yaffs_DoGenericObjectDeletion(yaffs_Object * in)$/;"	f	file:
yaffs_DumpDevStruct	yaffsfs.c	/^int yaffs_DumpDevStruct(const char *path)$/;"	f
yaffs_DumpPackedTags2	yaffs_packedtags2.c	/^static void yaffs_DumpPackedTags2(const yaffs_PackedTags2 * pt)$/;"	f	file:
yaffs_DumpTags2	yaffs_packedtags2.c	/^static void yaffs_DumpTags2(const yaffs_ExtendedTags * t)$/;"	f	file:
yaffs_ECCCalculate	yaffs_ecc.c	/^void yaffs_ECCCalculate(const unsigned char *data, unsigned char *ecc)$/;"	f
yaffs_ECCCalculateOther	yaffs_ecc.c	/^void yaffs_ECCCalculateOther(const unsigned char *data, unsigned nBytes,$/;"	f
yaffs_ECCCorrect	yaffs_ecc.c	/^int yaffs_ECCCorrect(unsigned char *data, unsigned char *read_ecc,$/;"	f
yaffs_ECCCorrectOther	yaffs_ecc.c	/^int yaffs_ECCCorrectOther(unsigned char *data, unsigned nBytes,$/;"	f
yaffs_ECCOther	yaffs_ecc.h	/^} yaffs_ECCOther;$/;"	t	typeref:struct:__anon29
yaffs_ECCResult	yaffs_guts.h	/^} yaffs_ECCResult;$/;"	t	typeref:enum:__anon7
yaffs_EraseBlockInNAND	yaffs_nand.c	/^int yaffs_EraseBlockInNAND(struct yaffs_DeviceStruct *dev,$/;"	f
yaffs_ExtendedTags	yaffs_guts.h	/^} yaffs_ExtendedTags;$/;"	t	typeref:struct:__anon9
yaffs_FileStructure	yaffs_guts.h	/^} yaffs_FileStructure;$/;"	t	typeref:struct:__anon14
yaffs_FindAndDeleteChunkInFile	yaffs_guts.c	/^static int yaffs_FindAndDeleteChunkInFile(yaffs_Object * in, int chunkInInode,$/;"	f	file:
yaffs_FindBlockForAllocation	yaffs_guts.c	/^static int yaffs_FindBlockForAllocation(yaffs_Device * dev)$/;"	f	file:
yaffs_FindBlockForGarbageCollection	yaffs_guts.c	/^static int yaffs_FindBlockForGarbageCollection(yaffs_Device * dev,$/;"	f	file:
yaffs_FindChunkCache	yaffs_guts.c	/^static yaffs_ChunkCache *yaffs_FindChunkCache(const yaffs_Object * obj,$/;"	f	file:
yaffs_FindChunkInFile	yaffs_guts.c	/^static int yaffs_FindChunkInFile(yaffs_Object * in, int chunkInInode,$/;"	f	file:
yaffs_FindChunkInGroup	yaffs_guts.c	/^static int yaffs_FindChunkInGroup(yaffs_Device * dev, int theChunk,$/;"	f	file:
yaffs_FindLevel0Tnode	yaffs_guts.c	/^static yaffs_Tnode *yaffs_FindLevel0Tnode(yaffs_Device * dev,$/;"	f	file:
yaffs_FindNiceObjectBucket	yaffs_guts.c	/^static int yaffs_FindNiceObjectBucket(yaffs_Device * dev)$/;"	f	file:
yaffs_FindObjectByName	yaffs_guts.c	/^yaffs_Object *yaffs_FindObjectByName(yaffs_Object * directory,$/;"	f
yaffs_FindObjectByNumber	yaffs_guts.c	/^yaffs_Object *yaffs_FindObjectByNumber(yaffs_Device * dev, __u32 number)$/;"	f
yaffs_FindOrCreateObjectByNumber	yaffs_guts.c	/^static yaffs_Object *yaffs_FindOrCreateObjectByNumber(yaffs_Device * dev,$/;"	f	file:
yaffs_FlushEntireDeviceCache	yaffs_guts.c	/^void yaffs_FlushEntireDeviceCache(yaffs_Device *dev)$/;"	f
yaffs_FlushFile	yaffs_guts.c	/^int yaffs_FlushFile(yaffs_Object * in, int updateTime)$/;"	f
yaffs_FlushFilesChunkCache	yaffs_guts.c	/^static void yaffs_FlushFilesChunkCache(yaffs_Object * obj)$/;"	f	file:
yaffs_FreeObject	yaffs_guts.c	/^static void yaffs_FreeObject(yaffs_Object * tn)$/;"	f	file:
yaffs_FreeTnode	yaffs_guts.c	/^static void yaffs_FreeTnode(yaffs_Device * dev, yaffs_Tnode * tn)$/;"	f	file:
yaffs_GarbageCollectBlock	yaffs_guts.c	/^static int yaffs_GarbageCollectBlock(yaffs_Device * dev, int block)$/;"	f	file:
yaffs_GetAttributes	yaffs_guts.c	/^int yaffs_GetAttributes(yaffs_Object * obj, struct iattr *attr)$/;"	f
yaffs_GetBlockInfo	yaffs_guts.h	/^static Y_INLINE yaffs_BlockInfo *yaffs_GetBlockInfo(yaffs_Device * dev, int blk)$/;"	f
yaffs_GetCheckpointSum	yaffs_checkptrw.c	/^int yaffs_GetCheckpointSum(yaffs_Device *dev, __u32 *sum)$/;"	f
yaffs_GetChunkGroupBase	yaffs_guts.c	/^static __u32 yaffs_GetChunkGroupBase(yaffs_Device *dev, yaffs_Tnode *tn, unsigned pos)$/;"	f	file:
yaffs_GetEquivalentObject	yaffs_guts.c	/^yaffs_Object *yaffs_GetEquivalentObject(yaffs_Object * obj)$/;"	f
yaffs_GetErasedChunks	yaffs_guts.c	/^static int yaffs_GetErasedChunks(yaffs_Device * dev)$/;"	f	file:
yaffs_GetFileSize	yaffs_guts.c	/^loff_t yaffs_GetFileSize(yaffs_Object * obj)$/;"	f
yaffs_GetNumberOfFreeChunks	yaffs_guts.c	/^int yaffs_GetNumberOfFreeChunks(yaffs_Device * dev)$/;"	f
yaffs_GetObjectFileLength	yaffs_guts.c	/^int yaffs_GetObjectFileLength(yaffs_Object * obj)$/;"	f
yaffs_GetObjectInode	yaffs_guts.c	/^int yaffs_GetObjectInode(yaffs_Object * obj)$/;"	f
yaffs_GetObjectLinkCount	yaffs_guts.c	/^int yaffs_GetObjectLinkCount(yaffs_Object * obj)$/;"	f
yaffs_GetObjectName	yaffs_guts.c	/^int yaffs_GetObjectName(yaffs_Object * obj, YCHAR * name, int buffSize)$/;"	f
yaffs_GetObjectType	yaffs_guts.c	/^unsigned yaffs_GetObjectType(yaffs_Object * obj)$/;"	f
yaffs_GetSymlinkAlias	yaffs_guts.c	/^YCHAR *yaffs_GetSymlinkAlias(yaffs_Object * obj)$/;"	f
yaffs_GetTagsFromSpare	yaffs_tagscompat.c	/^static void yaffs_GetTagsFromSpare(yaffs_Device * dev, yaffs_Spare * sparePtr,$/;"	f	file:
yaffs_GetTempBuffer	yaffs_guts.c	/^static __u8 *yaffs_GetTempBuffer(yaffs_Device * dev, int lineNo)$/;"	f	file:
yaffs_GetTnode	yaffs_guts.c	/^static yaffs_Tnode *yaffs_GetTnode(yaffs_Device * dev)$/;"	f	file:
yaffs_GetTnodeRaw	yaffs_guts.c	/^static yaffs_Tnode *yaffs_GetTnodeRaw(yaffs_Device * dev)$/;"	f	file:
yaffs_GrabChunkCache	yaffs_guts.c	/^static yaffs_ChunkCache *yaffs_GrabChunkCache(yaffs_Device * dev)$/;"	f	file:
yaffs_GrabChunkCacheWorker	yaffs_guts.c	/^static yaffs_ChunkCache *yaffs_GrabChunkCacheWorker(yaffs_Device * dev)$/;"	f	file:
yaffs_GutsInitialise	yaffs_guts.c	/^int yaffs_GutsInitialise(yaffs_Device * dev)$/;"	f
yaffs_HandleChunkError	yaffs_guts.c	/^void yaffs_HandleChunkError(yaffs_Device *dev, yaffs_BlockInfo *bi)$/;"	f
yaffs_HandleReadDataError	yaffs_tagscompat.c	/^static void yaffs_HandleReadDataError(yaffs_Device * dev, int chunkInNAND)$/;"	f	file:
yaffs_HandleShadowedObject	yaffs_guts.c	/^static void yaffs_HandleShadowedObject(yaffs_Device * dev, int objId,$/;"	f	file:
yaffs_HandleUpdateChunk	yaffs_guts.c	/^static void yaffs_HandleUpdateChunk(yaffs_Device * dev, int chunkInNAND,$/;"	f	file:
yaffs_HandleUpdateChunk	yaffs_tagscompat.c	/^static void yaffs_HandleUpdateChunk(yaffs_Device * dev, int chunkInNAND,$/;"	f	file:
yaffs_HandleWriteChunkError	yaffs_guts.c	/^static void yaffs_HandleWriteChunkError(yaffs_Device * dev, int chunkInNAND, int erasedOk)$/;"	f	file:
yaffs_HandleWriteChunkError	yaffs_tagscompat.c	/^static void yaffs_HandleWriteChunkError(yaffs_Device * dev, int chunkInNAND)$/;"	f	file:
yaffs_HandleWriteChunkOk	yaffs_guts.c	/^static void yaffs_HandleWriteChunkOk(yaffs_Device * dev, int chunkInNAND,$/;"	f	file:
yaffs_HandleWriteChunkOk	yaffs_tagscompat.c	/^static void yaffs_HandleWriteChunkOk(yaffs_Device * dev, int chunkInNAND,$/;"	f	file:
yaffs_HardLinkStructure	yaffs_guts.h	/^} yaffs_HardLinkStructure;$/;"	t	typeref:struct:__anon17
yaffs_HardlinkFixup	yaffs_guts.c	/^static void yaffs_HardlinkFixup(yaffs_Device *dev, yaffs_Object *hardList)$/;"	f	file:
yaffs_HashFunction	yaffs_guts.c	/^static Y_INLINE int yaffs_HashFunction(int n)$/;"	f	file:
yaffs_HashObject	yaffs_guts.c	/^static void yaffs_HashObject(yaffs_Object * in)$/;"	f	file:
yaffs_InitialiseBlocks	yaffs_guts.c	/^static int yaffs_InitialiseBlocks(yaffs_Device * dev)$/;"	f	file:
yaffs_InitialiseNAND	yaffs_nand.c	/^int yaffs_InitialiseNAND(struct yaffs_DeviceStruct *dev)$/;"	f
yaffs_InitialiseObjects	yaffs_guts.c	/^static void yaffs_InitialiseObjects(yaffs_Device * dev)$/;"	f	file:
yaffs_InitialiseTags	yaffs_tagsvalidity.c	/^void yaffs_InitialiseTags(yaffs_ExtendedTags * tags)$/;"	f
yaffs_InitialiseTempBuffers	yaffs_guts.c	/^static int yaffs_InitialiseTempBuffers(yaffs_Device *dev)$/;"	f	file:
yaffs_InitialiseTnodes	yaffs_guts.c	/^static void yaffs_InitialiseTnodes(yaffs_Device * dev)$/;"	f	file:
yaffs_InvalidateCheckpoint	yaffs_guts.c	/^static void yaffs_InvalidateCheckpoint(yaffs_Device *dev)$/;"	f	file:
yaffs_InvalidateChunkCache	yaffs_guts.c	/^static void yaffs_InvalidateChunkCache(yaffs_Object * object, int chunkId)$/;"	f	file:
yaffs_InvalidateWholeChunkCache	yaffs_guts.c	/^static void yaffs_InvalidateWholeChunkCache(yaffs_Object * in)$/;"	f	file:
yaffs_IsManagedTempBuffer	yaffs_guts.c	/^int yaffs_IsManagedTempBuffer(yaffs_Device * dev, const __u8 * buffer)$/;"	f
yaffs_Link	yaffs_guts.c	/^yaffs_Object *yaffs_Link(yaffs_Object * parent, const YCHAR * name,$/;"	f
yaffs_LoadTagsIntoSpare	yaffs_tagscompat.c	/^static void yaffs_LoadTagsIntoSpare(yaffs_Spare * sparePtr,$/;"	f	file:
yaffs_LostNFound	yaffs_guts.c	/^yaffs_Object *yaffs_LostNFound(yaffs_Device * dev)$/;"	f
yaffs_MarkBlockBad	yaffs_nand.c	/^int yaffs_MarkBlockBad(yaffs_Device * dev, int blockNo)$/;"	f
yaffs_MknodDirectory	yaffs_guts.c	/^yaffs_Object *yaffs_MknodDirectory(yaffs_Object * parent, const YCHAR * name,$/;"	f
yaffs_MknodFile	yaffs_guts.c	/^yaffs_Object *yaffs_MknodFile(yaffs_Object * parent, const YCHAR * name,$/;"	f
yaffs_MknodObject	yaffs_guts.c	/^static yaffs_Object *yaffs_MknodObject(yaffs_ObjectType type,$/;"	f	file:
yaffs_MknodSpecial	yaffs_guts.c	/^yaffs_Object *yaffs_MknodSpecial(yaffs_Object * parent, const YCHAR * name,$/;"	f
yaffs_MknodSymLink	yaffs_guts.c	/^yaffs_Object *yaffs_MknodSymLink(yaffs_Object * parent, const YCHAR * name,$/;"	f
yaffs_NANDSpare	yaffs_guts.h	/^struct yaffs_NANDSpare {$/;"	s
yaffs_Object	yaffs_guts.h	/^typedef struct yaffs_ObjectStruct yaffs_Object;$/;"	t	typeref:struct:yaffs_ObjectStruct
yaffs_ObjectBucket	yaffs_guts.h	/^} yaffs_ObjectBucket;$/;"	t	typeref:struct:__anon19
yaffs_ObjectHasCachedWriteData	yaffs_guts.c	/^static int yaffs_ObjectHasCachedWriteData(yaffs_Object *obj)$/;"	f	file:
yaffs_ObjectHeader	yaffs_guts.h	/^} yaffs_ObjectHeader;$/;"	t	typeref:struct:__anon13
yaffs_ObjectList	yaffs_guts.h	/^typedef struct yaffs_ObjectList_struct yaffs_ObjectList;$/;"	t	typeref:struct:yaffs_ObjectList_struct
yaffs_ObjectList_struct	yaffs_guts.h	/^struct yaffs_ObjectList_struct {$/;"	s
yaffs_ObjectStruct	yaffs_guts.h	/^struct yaffs_ObjectStruct {$/;"	s
yaffs_ObjectToCheckpointObject	yaffs_guts.c	/^static void yaffs_ObjectToCheckpointObject(yaffs_CheckpointObject *cp,$/;"	f	file:
yaffs_ObjectType	yaffs_guts.h	/^} yaffs_ObjectType;$/;"	t	typeref:enum:__anon8
yaffs_ObjectVariant	yaffs_guts.h	/^} yaffs_ObjectVariant;$/;"	t	typeref:union:__anon18
yaffs_PackTags1	yaffs_packedtags1.c	/^void yaffs_PackTags1(yaffs_PackedTags1 * pt, const yaffs_ExtendedTags * t)$/;"	f
yaffs_PackTags2	yaffs_packedtags2.c	/^void yaffs_PackTags2(yaffs_PackedTags2 * pt, const yaffs_ExtendedTags * t)$/;"	f
yaffs_PackedTags1	yaffs_packedtags1.h	/^} yaffs_PackedTags1;$/;"	t	typeref:struct:__anon28
yaffs_PackedTags2	yaffs_packedtags2.h	/^} yaffs_PackedTags2;$/;"	t	typeref:struct:__anon2
yaffs_PackedTags2TagsPart	yaffs_packedtags2.h	/^} yaffs_PackedTags2TagsPart;$/;"	t	typeref:struct:__anon1
yaffs_PruneFileStructure	yaffs_guts.c	/^static int yaffs_PruneFileStructure(yaffs_Device * dev,$/;"	f	file:
yaffs_PruneResizedChunks	yaffs_guts.c	/^static void yaffs_PruneResizedChunks(yaffs_Object * in, int newSize)$/;"	f	file:
yaffs_PruneWorker	yaffs_guts.c	/^static yaffs_Tnode *yaffs_PruneWorker(yaffs_Device * dev, yaffs_Tnode * tn,$/;"	f	file:
yaffs_PutChunkIntoFile	yaffs_guts.c	/^static int yaffs_PutChunkIntoFile(yaffs_Object * in, int chunkInInode,$/;"	f	file:
yaffs_PutLevel0Tnode	yaffs_guts.c	/^void yaffs_PutLevel0Tnode(yaffs_Device *dev, yaffs_Tnode *tn, unsigned pos, unsigned val)$/;"	f
yaffs_QueryInitialBlockState	yaffs_nand.c	/^int yaffs_QueryInitialBlockState(yaffs_Device * dev,$/;"	f
yaffs_ReadCheckpointData	yaffs_guts.c	/^static int yaffs_ReadCheckpointData(yaffs_Device *dev)$/;"	f	file:
yaffs_ReadCheckpointDevice	yaffs_guts.c	/^static int yaffs_ReadCheckpointDevice(yaffs_Device *dev)$/;"	f	file:
yaffs_ReadCheckpointObjects	yaffs_guts.c	/^static int yaffs_ReadCheckpointObjects(yaffs_Device *dev)$/;"	f	file:
yaffs_ReadCheckpointSum	yaffs_guts.c	/^static int yaffs_ReadCheckpointSum(yaffs_Device *dev)$/;"	f	file:
yaffs_ReadCheckpointTnodes	yaffs_guts.c	/^static int yaffs_ReadCheckpointTnodes(yaffs_Object *obj)$/;"	f	file:
yaffs_ReadCheckpointValidityMarker	yaffs_guts.c	/^static int yaffs_ReadCheckpointValidityMarker(yaffs_Device *dev, int head)$/;"	f	file:
yaffs_ReadChunkDataFromObject	yaffs_guts.c	/^static int yaffs_ReadChunkDataFromObject(yaffs_Object * in, int chunkInInode,$/;"	f	file:
yaffs_ReadChunkFromNAND	yaffs_tagscompat.c	/^static int yaffs_ReadChunkFromNAND(struct yaffs_DeviceStruct *dev,$/;"	f	file:
yaffs_ReadChunkWithTagsFromNAND	yaffs_nand.c	/^int yaffs_ReadChunkWithTagsFromNAND(yaffs_Device * dev, int chunkInNAND,$/;"	f
yaffs_ReadDataFromFile	yaffs_guts.c	/^int yaffs_ReadDataFromFile(yaffs_Object * in, __u8 * buffer, loff_t offset,$/;"	f
yaffs_ReleaseTempBuffer	yaffs_guts.c	/^static void yaffs_ReleaseTempBuffer(yaffs_Device * dev, __u8 * buffer,$/;"	f	file:
yaffs_RemoveObjectFromDirectory	yaffs_guts.c	/^static void yaffs_RemoveObjectFromDirectory(yaffs_Object * obj)$/;"	f	file:
yaffs_RenameObject	yaffs_guts.c	/^int yaffs_RenameObject(yaffs_Object * oldDir, const YCHAR * oldName,$/;"	f
yaffs_ResizeFile	yaffs_guts.c	/^int yaffs_ResizeFile(yaffs_Object * in, loff_t newSize)$/;"	f
yaffs_RetireBlock	yaffs_guts.c	/^static void yaffs_RetireBlock(yaffs_Device * dev, int blockInNAND)$/;"	f	file:
yaffs_Root	yaffs_guts.c	/^yaffs_Object *yaffs_Root(yaffs_Device * dev)$/;"	f
yaffs_Scan	yaffs_guts.c	/^static int yaffs_Scan(yaffs_Device * dev)$/;"	f	file:
yaffs_ScanBackwards	yaffs_guts.c	/^static int yaffs_ScanBackwards(yaffs_Device * dev)$/;"	f	file:
yaffs_SetAttributes	yaffs_guts.c	/^int yaffs_SetAttributes(yaffs_Object * obj, struct iattr *attr)$/;"	f
yaffs_SetChunkBit	yaffs_guts.c	/^static Y_INLINE void yaffs_SetChunkBit(yaffs_Device * dev, int blk, int chunk)$/;"	f	file:
yaffs_SetObjectName	yaffs_guts.c	/^static void yaffs_SetObjectName(yaffs_Object * obj, const YCHAR * name)$/;"	f	file:
yaffs_SkipFullVerification	yaffs_guts.c	/^static Y_INLINE int yaffs_SkipFullVerification(yaffs_Device *dev)$/;"	f	file:
yaffs_SkipNANDVerification	yaffs_guts.c	/^static Y_INLINE int yaffs_SkipNANDVerification(yaffs_Device *dev)$/;"	f	file:
yaffs_SkipVerification	yaffs_guts.c	/^static Y_INLINE int yaffs_SkipVerification(yaffs_Device *dev)$/;"	f	file:
yaffs_SoftDeleteChunk	yaffs_guts.c	/^static void yaffs_SoftDeleteChunk(yaffs_Device * dev, int chunk)$/;"	f	file:
yaffs_SoftDeleteFile	yaffs_guts.c	/^static void yaffs_SoftDeleteFile(yaffs_Object * obj)$/;"	f	file:
yaffs_SoftDeleteWorker	yaffs_guts.c	/^static int yaffs_SoftDeleteWorker(yaffs_Object * in, yaffs_Tnode * tn,$/;"	f	file:
yaffs_Spare	yaffs_guts.h	/^} yaffs_Spare;$/;"	t	typeref:struct:__anon10
yaffs_SpareInitialise	yaffs_tagscompat.c	/^static void yaffs_SpareInitialise(yaffs_Spare * spare)$/;"	f	file:
yaffs_StartUp	yaffscfg.c	/^int yaffs_StartUp(void)$/;"	f
yaffs_StillSomeChunkBits	yaffs_guts.c	/^static Y_INLINE int yaffs_StillSomeChunkBits(yaffs_Device * dev, int blk)$/;"	f	file:
yaffs_SumCompare	ydirectenv.h	89;"	d
yaffs_SumCompare	yportenv.h	142;"	d
yaffs_SumCompare	yportenv.h	82;"	d
yaffs_SuperBlockHeader	yaffs_guts.h	/^} yaffs_SuperBlockHeader;$/;"	t	typeref:struct:__anon22
yaffs_SymLinkStructure	yaffs_guts.h	/^} yaffs_SymLinkStructure;$/;"	t	typeref:struct:__anon16
yaffs_Tags	yaffs_guts.h	/^} yaffs_Tags;$/;"	t	typeref:struct:__anon5
yaffs_TagsCompatabilityMarkNANDBlockBad	yaffs_tagscompat.c	/^int yaffs_TagsCompatabilityMarkNANDBlockBad(struct yaffs_DeviceStruct *dev,$/;"	f
yaffs_TagsCompatabilityQueryNANDBlock	yaffs_tagscompat.c	/^int yaffs_TagsCompatabilityQueryNANDBlock(struct yaffs_DeviceStruct *dev,$/;"	f
yaffs_TagsCompatabilityReadChunkWithTagsFromNAND	yaffs_tagscompat.c	/^int yaffs_TagsCompatabilityReadChunkWithTagsFromNAND(yaffs_Device * dev,$/;"	f
yaffs_TagsCompatabilityWriteChunkWithTagsToNAND	yaffs_tagscompat.c	/^int yaffs_TagsCompatabilityWriteChunkWithTagsToNAND(yaffs_Device * dev,$/;"	f
yaffs_TagsMatch	yaffs_guts.c	/^static int yaffs_TagsMatch(const yaffs_ExtendedTags * tags, int objectId,$/;"	f	file:
yaffs_TagsUnion	yaffs_guts.h	/^} yaffs_TagsUnion;$/;"	t	typeref:union:__anon6
yaffs_TempBuffer	yaffs_guts.h	/^} yaffs_TempBuffer;$/;"	t	typeref:struct:__anon21
yaffs_Tnode	yaffs_guts.h	/^typedef union yaffs_Tnode_union yaffs_Tnode;$/;"	t	typeref:union:yaffs_Tnode_union
yaffs_TnodeList	yaffs_guts.h	/^typedef struct yaffs_TnodeList_struct yaffs_TnodeList;$/;"	t	typeref:struct:yaffs_TnodeList_struct
yaffs_TnodeList_struct	yaffs_guts.h	/^struct yaffs_TnodeList_struct {$/;"	s
yaffs_Tnode_union	yaffs_guts.h	/^union yaffs_Tnode_union {$/;"	u
yaffs_UnhashObject	yaffs_guts.c	/^static void yaffs_UnhashObject(yaffs_Object * tn)$/;"	f	file:
yaffs_Unlink	yaffs_guts.c	/^int yaffs_Unlink(yaffs_Object * dir, const YCHAR * name)$/;"	f
yaffs_UnlinkFile	yaffs_guts.c	/^static int yaffs_UnlinkFile(yaffs_Object * in)$/;"	f	file:
yaffs_UnlinkObject	yaffs_guts.c	/^static int yaffs_UnlinkObject( yaffs_Object *obj)$/;"	f	file:
yaffs_UnlinkWorker	yaffs_guts.c	/^static int yaffs_UnlinkWorker(yaffs_Object * obj)$/;"	f	file:
yaffs_UnpackTags1	yaffs_packedtags1.c	/^void yaffs_UnpackTags1(yaffs_ExtendedTags * t, const yaffs_PackedTags1 * pt)$/;"	f
yaffs_UnpackTags2	yaffs_packedtags2.c	/^void yaffs_UnpackTags2(yaffs_ExtendedTags * t, yaffs_PackedTags2 * pt)$/;"	f
yaffs_UpdateObjectHeader	yaffs_guts.c	/^int yaffs_UpdateObjectHeader(yaffs_Object * in, const YCHAR * name, int force,$/;"	f
yaffs_UseChunkCache	yaffs_guts.c	/^static void yaffs_UseChunkCache(yaffs_Device * dev, yaffs_ChunkCache * cache,$/;"	f	file:
yaffs_ValidateTags	yaffs_tagsvalidity.c	/^int yaffs_ValidateTags(yaffs_ExtendedTags * tags)$/;"	f
yaffs_VerifyBlock	yaffs_guts.c	/^static void yaffs_VerifyBlock(yaffs_Device *dev,yaffs_BlockInfo *bi,int n)$/;"	f	file:
yaffs_VerifyBlocks	yaffs_guts.c	/^static void yaffs_VerifyBlocks(yaffs_Device *dev)$/;"	f	file:
yaffs_VerifyChunkBitId	yaffs_guts.c	/^static Y_INLINE void yaffs_VerifyChunkBitId(yaffs_Device *dev, int blk, int chunk)$/;"	f	file:
yaffs_VerifyCollectedBlock	yaffs_guts.c	/^static void yaffs_VerifyCollectedBlock(yaffs_Device *dev,yaffs_BlockInfo *bi,int n)$/;"	f	file:
yaffs_VerifyCompare	yaffs_tagscompat.c	/^static int yaffs_VerifyCompare(const __u8 * d0, const __u8 * d1,$/;"	f	file:
yaffs_VerifyDirectory	yaffs_guts.c	/^static void yaffs_VerifyDirectory(yaffs_Object *obj)$/;"	f	file:
yaffs_VerifyFile	yaffs_guts.c	/^static void yaffs_VerifyFile(yaffs_Object *obj)$/;"	f	file:
yaffs_VerifyFreeChunks	yaffs_guts.c	/^static void yaffs_VerifyFreeChunks(yaffs_Device * dev)$/;"	f	file:
yaffs_VerifyHardLink	yaffs_guts.c	/^static void yaffs_VerifyHardLink(yaffs_Object *obj)$/;"	f	file:
yaffs_VerifyObject	yaffs_guts.c	/^static void yaffs_VerifyObject(yaffs_Object *obj)$/;"	f	file:
yaffs_VerifyObjectHeader	yaffs_guts.c	/^static void yaffs_VerifyObjectHeader(yaffs_Object *obj, yaffs_ObjectHeader *oh, yaffs_ExtendedTags *tags, int parentCheck)$/;"	f	file:
yaffs_VerifyObjects	yaffs_guts.c	/^static void yaffs_VerifyObjects(yaffs_Device *dev)$/;"	f	file:
yaffs_VerifySpecial	yaffs_guts.c	/^static void yaffs_VerifySpecial(yaffs_Object *obj)$/;"	f	file:
yaffs_VerifySymlink	yaffs_guts.c	/^static void yaffs_VerifySymlink(yaffs_Object *obj)$/;"	f	file:
yaffs_WriteCheckpointData	yaffs_guts.c	/^static int yaffs_WriteCheckpointData(yaffs_Device *dev)$/;"	f	file:
yaffs_WriteCheckpointDevice	yaffs_guts.c	/^static int yaffs_WriteCheckpointDevice(yaffs_Device *dev)$/;"	f	file:
yaffs_WriteCheckpointObjects	yaffs_guts.c	/^static int yaffs_WriteCheckpointObjects(yaffs_Device *dev)$/;"	f	file:
yaffs_WriteCheckpointSum	yaffs_guts.c	/^static int yaffs_WriteCheckpointSum(yaffs_Device *dev)$/;"	f	file:
yaffs_WriteCheckpointTnodes	yaffs_guts.c	/^static int yaffs_WriteCheckpointTnodes(yaffs_Object *obj)$/;"	f	file:
yaffs_WriteCheckpointValidityMarker	yaffs_guts.c	/^static int yaffs_WriteCheckpointValidityMarker(yaffs_Device *dev,int head)$/;"	f	file:
yaffs_WriteChunkDataToObject	yaffs_guts.c	/^static int yaffs_WriteChunkDataToObject(yaffs_Object * in, int chunkInInode,$/;"	f	file:
yaffs_WriteChunkToNAND	yaffs_tagscompat.c	/^static int yaffs_WriteChunkToNAND(struct yaffs_DeviceStruct *dev,$/;"	f	file:
yaffs_WriteChunkWithTagsToNAND	yaffs_nand.c	/^int yaffs_WriteChunkWithTagsToNAND(yaffs_Device * dev,$/;"	f
yaffs_WriteDataToFile	yaffs_guts.c	/^int yaffs_WriteDataToFile(yaffs_Object * in, const __u8 * buffer, loff_t offset,$/;"	f
yaffs_WriteNewChunkWithTagsToNAND	yaffs_guts.c	/^static int yaffs_WriteNewChunkWithTagsToNAND(struct yaffs_DeviceStruct *dev,$/;"	f	file:
yaffs_checkptrw_c_version	yaffs_checkptrw.c	/^const char *yaffs_checkptrw_c_version =$/;"	v
yaffs_chmod	yaffsfs.c	/^int yaffs_chmod(const char *path, mode_t mode)$/;"	f
yaffs_close	yaffsfs.c	/^int yaffs_close(int fd)$/;"	f
yaffs_closedir	yaffsfs.c	/^int yaffs_closedir(yaffs_DIR *dirp)$/;"	f
yaffs_countBitsTable	yaffs_tagscompat.c	/^static const char yaffs_countBitsTable[256] = {$/;"	v	file:
yaffs_dirent	yaffsfs.h	/^struct yaffs_dirent{$/;"	s
yaffs_dirent	yaffsfs.h	/^typedef struct yaffs_dirent yaffs_dirent;$/;"	t	typeref:struct:yaffs_dirent
yaffs_ecc_c_version	yaffs_ecc.c	/^const char *yaffs_ecc_c_version =$/;"	v
yaffs_errno	yaffscfg.c	/^static int yaffs_errno = 0;$/;"	v	file:
yaffs_fchmod	yaffsfs.c	/^int yaffs_fchmod(int fd, mode_t mode)$/;"	f
yaffs_free	yaffscfg.c	/^void yaffs_free(void *ptr)$/;"	f
yaffs_freeVerificationFailures	yaffs_guts.c	/^static int yaffs_freeVerificationFailures;$/;"	v	file:
yaffs_freespace	yaffsfs.c	/^loff_t yaffs_freespace(const char *path)$/;"	f
yaffs_fstat	yaffsfs.c	/^int yaffs_fstat(int fd, struct yaffs_stat *buf)$/;"	f
yaffs_guts_c_version	yaffs_guts.c	/^const char *yaffs_guts_c_version =$/;"	v
yaffs_initialise	yaffsfs.c	/^void yaffs_initialise(yaffsfs_DeviceConfiguration *cfgList)$/;"	f
yaffs_link	yaffsfs.c	/^int yaffs_link(const char *oldpath, const char *newpath)$/;"	f
yaffs_lseek	yaffsfs.c	/^off_t yaffs_lseek(int fd, off_t offset, int whence)$/;"	f
yaffs_lstat	yaffsfs.c	/^int yaffs_lstat(const char *path, struct yaffs_stat *buf)$/;"	f
yaffs_malloc	yaffscfg.c	/^void *yaffs_malloc(size_t size)$/;"	f
yaffs_mkdir	yaffsfs.c	/^int yaffs_mkdir(const char *path, mode_t mode)$/;"	f
yaffs_mount	yaffsfs.c	/^int yaffs_mount(const char *path)$/;"	f
yaffs_mtdif2_c_version	yaffs_mtdif2.c	/^const char *yaffs_mtdif2_c_version =$/;"	v
yaffs_mtdif_c_version	yaffs_mtdif.c	/^const char *yaffs_mtdif_c_version =$/;"	v
yaffs_nand_c_version	yaffs_nand.c	/^const char *yaffs_nand_c_version =$/;"	v
yaffs_noeccinfo	yaffs_mtdif.c	/^static struct nand_oobinfo yaffs_noeccinfo = {$/;"	v	typeref:struct:nand_oobinfo	file:
yaffs_oobinfo	yaffs_mtdif.c	/^static struct nand_oobinfo yaffs_oobinfo = {$/;"	v	typeref:struct:nand_oobinfo	file:
yaffs_open	yaffsfs.c	/^int yaffs_open(const char *path, int oflag, int mode)$/;"	f
yaffs_opendir	yaffsfs.c	/^yaffs_DIR *yaffs_opendir(const char *dirname)$/;"	f
yaffs_qsort	yaffs_qsort.c	/^yaffs_qsort(void *aa, size_t n, size_t es,$/;"	f
yaffs_read	yaffsfs.c	/^int yaffs_read(int fd, void *buf, unsigned int nbyte)$/;"	f
yaffs_readdir	yaffsfs.c	/^struct yaffs_dirent *yaffs_readdir(yaffs_DIR *dirp)$/;"	f
yaffs_readlink	yaffsfs.c	/^int yaffs_readlink(const char *path, char *buf, int bufsiz)$/;"	f
yaffs_rename	yaffsfs.c	/^int yaffs_rename(const char *oldPath, const char *newPath)$/;"	f
yaffs_rewinddir	yaffsfs.c	/^void yaffs_rewinddir(yaffs_DIR *dirp)$/;"	f
yaffs_rmdir	yaffsfs.c	/^int yaffs_rmdir(const char *path)$/;"	f
yaffs_sprintf	ydirectenv.h	48;"	d
yaffs_sprintf	yportenv.h	123;"	d
yaffs_sprintf	yportenv.h	53;"	d
yaffs_stat	yaffsfs.c	/^int yaffs_stat(const char *path, struct yaffs_stat *buf)$/;"	f
yaffs_stat	yaffsfs.h	/^struct yaffs_stat{$/;"	s
yaffs_strcmp	ydirectenv.h	90;"	d
yaffs_strcmp	yportenv.h	143;"	d
yaffs_strcmp	yportenv.h	83;"	d
yaffs_strcpy	ydirectenv.h	44;"	d
yaffs_strcpy	yportenv.h	120;"	d
yaffs_strcpy	yportenv.h	49;"	d
yaffs_strlen	ydirectenv.h	47;"	d
yaffs_strlen	yportenv.h	122;"	d
yaffs_strlen	yportenv.h	52;"	d
yaffs_strncmp	ydirectenv.h	46;"	d
yaffs_strncmp	yportenv.h	51;"	d
yaffs_strncpy	ydirectenv.h	45;"	d
yaffs_strncpy	yportenv.h	121;"	d
yaffs_strncpy	yportenv.h	50;"	d
yaffs_symlink	yaffsfs.c	/^int yaffs_symlink(const char *oldpath, const char *newpath)$/;"	f
yaffs_toupper	ydirectenv.h	49;"	d
yaffs_toupper	yportenv.h	124;"	d
yaffs_toupper	yportenv.h	54;"	d
yaffs_trace	yportenv.h	89;"	d
yaffs_traceMask	yaffscfg.c	/^unsigned yaffs_traceMask = 0x0; \/* Disable logging *\/$/;"	v
yaffs_truncate	yaffsfs.c	/^int yaffs_truncate(int fd, off_t newSize)$/;"	f
yaffs_unlink	yaffsfs.c	/^int yaffs_unlink(const char *path)$/;"	f
yaffs_unmount	yaffsfs.c	/^int yaffs_unmount(const char *path)$/;"	f
yaffs_wr_attempts	yaffsfs.c	/^unsigned int yaffs_wr_attempts;$/;"	v
yaffs_write	yaffsfs.c	/^int yaffs_write(int fd, const void *buf, unsigned int nbyte)$/;"	f
yaffsfs_CurrentTime	yaffscfg.c	/^__u32 yaffsfs_CurrentTime(void)$/;"	f
yaffsfs_DeviceConfiguration	yaffscfg.h	/^} yaffsfs_DeviceConfiguration;$/;"	t	typeref:struct:__anon25
yaffsfs_DirAdvance	yaffsfs.c	/^static void yaffsfs_DirAdvance(yaffsfs_DirectorySearchContext *dsc)$/;"	f	file:
yaffsfs_DirectorySearchContext	yaffsfs.c	/^} yaffsfs_DirectorySearchContext;$/;"	t	typeref:struct:__anon27	file:
yaffsfs_DoChMod	yaffsfs.c	/^static int yaffsfs_DoChMod(yaffs_Object *obj,mode_t mode)$/;"	f	file:
yaffsfs_DoFindDirectory	yaffsfs.c	/^static yaffs_Object *yaffsfs_DoFindDirectory(yaffs_Object *startDir,const char *path,char **name,int symDepth)$/;"	f	file:
yaffsfs_DoStat	yaffsfs.c	/^static int yaffsfs_DoStat(yaffs_Object *obj,struct yaffs_stat *buf)$/;"	f	file:
yaffsfs_DoStatOrLStat	yaffsfs.c	/^static int yaffsfs_DoStatOrLStat(const char *path, struct yaffs_stat *buf,int doLStat)$/;"	f	file:
yaffsfs_DoUnlink	yaffsfs.c	/^int yaffsfs_DoUnlink(const char *path,int isDirectory)$/;"	f
yaffsfs_FindDevice	yaffsfs.c	/^static yaffs_Device *yaffsfs_FindDevice(const char *path, char **restOfPath)$/;"	f	file:
yaffsfs_FindDirectory	yaffsfs.c	/^static yaffs_Object *yaffsfs_FindDirectory(yaffs_Object *relativeDirectory,const char *path,char **name,int symDepth)$/;"	f	file:
yaffsfs_FindObject	yaffsfs.c	/^static yaffs_Object *yaffsfs_FindObject(yaffs_Object *relativeDirectory, const char *path,int symDepth)$/;"	f	file:
yaffsfs_FindRoot	yaffsfs.c	/^static yaffs_Object *yaffsfs_FindRoot(const char *path, char **restOfPath)$/;"	f	file:
yaffsfs_FollowLink	yaffsfs.c	/^static yaffs_Object *yaffsfs_FollowLink(yaffs_Object *obj,int symDepth)$/;"	f	file:
yaffsfs_GetError	yaffscfg.c	/^int yaffsfs_GetError(void)$/;"	f
yaffsfs_GetHandle	yaffsfs.c	/^static int yaffsfs_GetHandle(void)$/;"	f	file:
yaffsfs_GetHandleObject	yaffsfs.c	/^yaffs_Object *yaffsfs_GetHandleObject(int handle)$/;"	f
yaffsfs_GetHandlePointer	yaffsfs.c	/^yaffsfs_Handle *yaffsfs_GetHandlePointer(int h)$/;"	f
yaffsfs_Handle	yaffsfs.c	/^}yaffsfs_Handle;$/;"	t	typeref:struct:__anon26	file:
yaffsfs_InitHandles	yaffsfs.c	/^static int yaffsfs_InitHandles(void)$/;"	f	file:
yaffsfs_LocalInitialisation	yaffscfg.c	/^void yaffsfs_LocalInitialisation(void)$/;"	f
yaffsfs_Lock	yaffscfg.c	/^void yaffsfs_Lock(void)$/;"	f
yaffsfs_Match	yaffsfs.c	/^int yaffsfs_Match(char a, char b)$/;"	f
yaffsfs_PutHandle	yaffsfs.c	/^static int yaffsfs_PutHandle(int handle)$/;"	f	file:
yaffsfs_RemoveObjectCallback	yaffsfs.c	/^static void yaffsfs_RemoveObjectCallback(yaffs_Object *obj)$/;"	f	file:
yaffsfs_SetDirRewound	yaffsfs.c	/^static void yaffsfs_SetDirRewound(yaffsfs_DirectorySearchContext *dsc)$/;"	f	file:
yaffsfs_SetError	yaffscfg.c	/^void yaffsfs_SetError(int err)$/;"	f
yaffsfs_Unlock	yaffscfg.c	/^void yaffsfs_Unlock(void)$/;"	f
yaffsfs_c_version	yaffsfs.c	/^const char *yaffsfs_c_version="$Id: yaffsfs.c,v 1.18 2007\/07\/18 19:40:38 charles Exp $";$/;"	v
yaffsfs_config	yaffscfg.c	/^static yaffsfs_DeviceConfiguration yaffsfs_config[] = {$/;"	v	file:
yaffsfs_configurationList	yaffsfs.c	/^static yaffsfs_DeviceConfiguration *yaffsfs_configurationList;$/;"	v	file:
yaffsfs_handle	yaffsfs.c	/^static yaffsfs_Handle yaffsfs_handle[YAFFSFS_N_HANDLES];$/;"	v	file:
ybicmp	yaffs_guts.c	/^static int ybicmp(const void *a, const void *b){$/;"	f	file:
yst_atime	yaffs_guts.h	/^	__u32 yst_atime;$/;"	m	struct:__anon13
yst_atime	yaffs_guts.h	/^	__u32 yst_atime;$/;"	m	struct:yaffs_ObjectStruct
yst_atime	yaffsfs.h	/^    unsigned long yst_atime;    \/* time of last access *\/$/;"	m	struct:yaffs_stat
yst_ctime	yaffs_guts.h	/^	__u32 yst_ctime;$/;"	m	struct:__anon13
yst_ctime	yaffs_guts.h	/^	__u32 yst_ctime;$/;"	m	struct:yaffs_ObjectStruct
yst_ctime	yaffsfs.h	/^    unsigned long yst_ctime;    \/* time of last change *\/$/;"	m	struct:yaffs_stat
yst_gid	yaffs_guts.h	/^	__u32 yst_gid;$/;"	m	struct:__anon13
yst_gid	yaffs_guts.h	/^	__u32 yst_gid;$/;"	m	struct:yaffs_ObjectStruct
yst_mode	yaffs_guts.h	/^	__u32 yst_mode;		\/* protection *\/$/;"	m	struct:__anon13
yst_mode	yaffs_guts.h	/^	__u32 yst_mode;$/;"	m	struct:yaffs_ObjectStruct
yst_mtime	yaffs_guts.h	/^	__u32 yst_mtime;$/;"	m	struct:__anon13
yst_mtime	yaffs_guts.h	/^	__u32 yst_mtime;$/;"	m	struct:yaffs_ObjectStruct
yst_mtime	yaffsfs.h	/^    unsigned long yst_mtime;    \/* time of last modification *\/$/;"	m	struct:yaffs_stat
yst_rdev	yaffs_guts.h	/^	__u32 yst_rdev;		\/* device stuff for block and char devices (major\/min) *\/$/;"	m	struct:__anon13
yst_rdev	yaffs_guts.h	/^	__u32 yst_rdev;$/;"	m	struct:yaffs_ObjectStruct
yst_uid	yaffs_guts.h	/^	__u32 yst_uid;$/;"	m	struct:__anon13
yst_uid	yaffs_guts.h	/^	__u32 yst_uid;$/;"	m	struct:yaffs_ObjectStruct
